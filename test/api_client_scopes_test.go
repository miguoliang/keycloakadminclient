/*
Keycloak Admin REST API

Testing ClientScopesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package keycloakadminclient

import (
	"context"
	openapiclient "github.com/miguoliang/keycloakadminclient"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_keycloakadminclient_ClientScopesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ClientScopesAPIService AdminRealmsRealmClientScopesClientScopeIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientScopeId string

		httpRes, err := apiClient.ClientScopesAPI.AdminRealmsRealmClientScopesClientScopeIdDelete(context.Background(), realm, clientScopeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientScopesAPIService AdminRealmsRealmClientScopesClientScopeIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientScopeId string

		resp, httpRes, err := apiClient.ClientScopesAPI.AdminRealmsRealmClientScopesClientScopeIdGet(context.Background(), realm, clientScopeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientScopesAPIService AdminRealmsRealmClientScopesClientScopeIdPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientScopeId string

		httpRes, err := apiClient.ClientScopesAPI.AdminRealmsRealmClientScopesClientScopeIdPut(context.Background(), realm, clientScopeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientScopesAPIService AdminRealmsRealmClientScopesGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.ClientScopesAPI.AdminRealmsRealmClientScopesGet(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientScopesAPIService AdminRealmsRealmClientScopesPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		httpRes, err := apiClient.ClientScopesAPI.AdminRealmsRealmClientScopesPost(context.Background(), realm).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientScopesAPIService AdminRealmsRealmClientTemplatesClientScopeIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientScopeId string

		httpRes, err := apiClient.ClientScopesAPI.AdminRealmsRealmClientTemplatesClientScopeIdDelete(context.Background(), realm, clientScopeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientScopesAPIService AdminRealmsRealmClientTemplatesClientScopeIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientScopeId string

		resp, httpRes, err := apiClient.ClientScopesAPI.AdminRealmsRealmClientTemplatesClientScopeIdGet(context.Background(), realm, clientScopeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientScopesAPIService AdminRealmsRealmClientTemplatesClientScopeIdPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientScopeId string

		httpRes, err := apiClient.ClientScopesAPI.AdminRealmsRealmClientTemplatesClientScopeIdPut(context.Background(), realm, clientScopeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientScopesAPIService AdminRealmsRealmClientTemplatesGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.ClientScopesAPI.AdminRealmsRealmClientTemplatesGet(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientScopesAPIService AdminRealmsRealmClientTemplatesPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		httpRes, err := apiClient.ClientScopesAPI.AdminRealmsRealmClientTemplatesPost(context.Background(), realm).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
