/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keycloakadminclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// RolesByIDAPIService RolesByIDAPI service
type RolesByIDAPIService service

type RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGetRequest struct {
	ctx        context.Context
	ApiService *RolesByIDAPIService
	realm      string
	clientUuid string
	roleId     string
}

func (r RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGetRequest) Execute() ([]RoleRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGetExecute(r)
}

/*
AdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGet Get client-level roles for the client that are in the role's composite

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param clientUuid
	@param roleId
	@return RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGetRequest
*/
func (a *RolesByIDAPIService) AdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGet(ctx context.Context, realm string, clientUuid string, roleId string) RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGetRequest {
	return RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		clientUuid: clientUuid,
		roleId:     roleId,
	}
}

// Execute executes the request
//
//	@return []RoleRepresentation
func (a *RolesByIDAPIService) AdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGetExecute(r RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGetRequest) ([]RoleRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []RoleRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RolesByIDAPIService.AdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/roles-by-id/{role-id}/composites/clients/{clientUuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clientUuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"role-id"+"}", url.PathEscape(parameterValueToString(r.roleId, "roleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesDeleteRequest struct {
	ctx                context.Context
	ApiService         *RolesByIDAPIService
	realm              string
	roleId             string
	roleRepresentation *[]RoleRepresentation
}

func (r RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesDeleteRequest) RoleRepresentation(roleRepresentation []RoleRepresentation) RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesDeleteRequest {
	r.roleRepresentation = &roleRepresentation
	return r
}

func (r RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmRolesByIdRoleIdCompositesDeleteExecute(r)
}

/*
AdminRealmsRealmRolesByIdRoleIdCompositesDelete Remove a set of roles from the role's composite

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param roleId Role id
	@return RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesDeleteRequest
*/
func (a *RolesByIDAPIService) AdminRealmsRealmRolesByIdRoleIdCompositesDelete(ctx context.Context, realm string, roleId string) RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesDeleteRequest {
	return RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		roleId:     roleId,
	}
}

// Execute executes the request
func (a *RolesByIDAPIService) AdminRealmsRealmRolesByIdRoleIdCompositesDeleteExecute(r RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RolesByIDAPIService.AdminRealmsRealmRolesByIdRoleIdCompositesDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/roles-by-id/{role-id}/composites"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"role-id"+"}", url.PathEscape(parameterValueToString(r.roleId, "roleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.roleRepresentation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesGetRequest struct {
	ctx        context.Context
	ApiService *RolesByIDAPIService
	realm      string
	roleId     string
	first      *int32
	max        *int32
	search     *string
}

func (r RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesGetRequest) First(first int32) RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesGetRequest {
	r.first = &first
	return r
}

func (r RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesGetRequest) Max(max int32) RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesGetRequest {
	r.max = &max
	return r
}

func (r RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesGetRequest) Search(search string) RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesGetRequest {
	r.search = &search
	return r
}

func (r RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesGetRequest) Execute() ([]RoleRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmRolesByIdRoleIdCompositesGetExecute(r)
}

/*
AdminRealmsRealmRolesByIdRoleIdCompositesGet Get role's children Returns a set of role's children provided the role is a composite.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param roleId
	@return RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesGetRequest
*/
func (a *RolesByIDAPIService) AdminRealmsRealmRolesByIdRoleIdCompositesGet(ctx context.Context, realm string, roleId string) RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesGetRequest {
	return RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		roleId:     roleId,
	}
}

// Execute executes the request
//
//	@return []RoleRepresentation
func (a *RolesByIDAPIService) AdminRealmsRealmRolesByIdRoleIdCompositesGetExecute(r RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesGetRequest) ([]RoleRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []RoleRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RolesByIDAPIService.AdminRealmsRealmRolesByIdRoleIdCompositesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/roles-by-id/{role-id}/composites"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"role-id"+"}", url.PathEscape(parameterValueToString(r.roleId, "roleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.first != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "first", r.first, "")
	}
	if r.max != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesPostRequest struct {
	ctx                context.Context
	ApiService         *RolesByIDAPIService
	realm              string
	roleId             string
	roleRepresentation *[]RoleRepresentation
}

func (r RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesPostRequest) RoleRepresentation(roleRepresentation []RoleRepresentation) RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesPostRequest {
	r.roleRepresentation = &roleRepresentation
	return r
}

func (r RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmRolesByIdRoleIdCompositesPostExecute(r)
}

/*
AdminRealmsRealmRolesByIdRoleIdCompositesPost Make the role a composite role by associating some child roles

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param roleId
	@return RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesPostRequest
*/
func (a *RolesByIDAPIService) AdminRealmsRealmRolesByIdRoleIdCompositesPost(ctx context.Context, realm string, roleId string) RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesPostRequest {
	return RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesPostRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		roleId:     roleId,
	}
}

// Execute executes the request
func (a *RolesByIDAPIService) AdminRealmsRealmRolesByIdRoleIdCompositesPostExecute(r RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RolesByIDAPIService.AdminRealmsRealmRolesByIdRoleIdCompositesPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/roles-by-id/{role-id}/composites"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"role-id"+"}", url.PathEscape(parameterValueToString(r.roleId, "roleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.roleRepresentation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesRealmGetRequest struct {
	ctx        context.Context
	ApiService *RolesByIDAPIService
	realm      string
	roleId     string
}

func (r RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesRealmGetRequest) Execute() ([]RoleRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmRolesByIdRoleIdCompositesRealmGetExecute(r)
}

/*
AdminRealmsRealmRolesByIdRoleIdCompositesRealmGet Get realm-level roles that are in the role's composite

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param roleId
	@return RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesRealmGetRequest
*/
func (a *RolesByIDAPIService) AdminRealmsRealmRolesByIdRoleIdCompositesRealmGet(ctx context.Context, realm string, roleId string) RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesRealmGetRequest {
	return RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesRealmGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		roleId:     roleId,
	}
}

// Execute executes the request
//
//	@return []RoleRepresentation
func (a *RolesByIDAPIService) AdminRealmsRealmRolesByIdRoleIdCompositesRealmGetExecute(r RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdCompositesRealmGetRequest) ([]RoleRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []RoleRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RolesByIDAPIService.AdminRealmsRealmRolesByIdRoleIdCompositesRealmGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/roles-by-id/{role-id}/composites/realm"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"role-id"+"}", url.PathEscape(parameterValueToString(r.roleId, "roleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdDeleteRequest struct {
	ctx        context.Context
	ApiService *RolesByIDAPIService
	realm      string
	roleId     string
}

func (r RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmRolesByIdRoleIdDeleteExecute(r)
}

/*
AdminRealmsRealmRolesByIdRoleIdDelete Delete the role

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param roleId id of role
	@return RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdDeleteRequest
*/
func (a *RolesByIDAPIService) AdminRealmsRealmRolesByIdRoleIdDelete(ctx context.Context, realm string, roleId string) RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdDeleteRequest {
	return RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		roleId:     roleId,
	}
}

// Execute executes the request
func (a *RolesByIDAPIService) AdminRealmsRealmRolesByIdRoleIdDeleteExecute(r RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RolesByIDAPIService.AdminRealmsRealmRolesByIdRoleIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/roles-by-id/{role-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"role-id"+"}", url.PathEscape(parameterValueToString(r.roleId, "roleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdGetRequest struct {
	ctx        context.Context
	ApiService *RolesByIDAPIService
	realm      string
	roleId     string
}

func (r RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdGetRequest) Execute() (*RoleRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmRolesByIdRoleIdGetExecute(r)
}

/*
AdminRealmsRealmRolesByIdRoleIdGet Get a specific role's representation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param roleId id of role
	@return RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdGetRequest
*/
func (a *RolesByIDAPIService) AdminRealmsRealmRolesByIdRoleIdGet(ctx context.Context, realm string, roleId string) RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdGetRequest {
	return RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		roleId:     roleId,
	}
}

// Execute executes the request
//
//	@return RoleRepresentation
func (a *RolesByIDAPIService) AdminRealmsRealmRolesByIdRoleIdGetExecute(r RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdGetRequest) (*RoleRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RoleRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RolesByIDAPIService.AdminRealmsRealmRolesByIdRoleIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/roles-by-id/{role-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"role-id"+"}", url.PathEscape(parameterValueToString(r.roleId, "roleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdManagementPermissionsGetRequest struct {
	ctx        context.Context
	ApiService *RolesByIDAPIService
	realm      string
	roleId     string
}

func (r RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdManagementPermissionsGetRequest) Execute() (*ManagementPermissionReference, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmRolesByIdRoleIdManagementPermissionsGetExecute(r)
}

/*
AdminRealmsRealmRolesByIdRoleIdManagementPermissionsGet Return object stating whether role Authorization permissions have been initialized or not and a reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param roleId
	@return RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdManagementPermissionsGetRequest
*/
func (a *RolesByIDAPIService) AdminRealmsRealmRolesByIdRoleIdManagementPermissionsGet(ctx context.Context, realm string, roleId string) RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdManagementPermissionsGetRequest {
	return RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdManagementPermissionsGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		roleId:     roleId,
	}
}

// Execute executes the request
//
//	@return ManagementPermissionReference
func (a *RolesByIDAPIService) AdminRealmsRealmRolesByIdRoleIdManagementPermissionsGetExecute(r RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdManagementPermissionsGetRequest) (*ManagementPermissionReference, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ManagementPermissionReference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RolesByIDAPIService.AdminRealmsRealmRolesByIdRoleIdManagementPermissionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/roles-by-id/{role-id}/management/permissions"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"role-id"+"}", url.PathEscape(parameterValueToString(r.roleId, "roleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdManagementPermissionsPutRequest struct {
	ctx                           context.Context
	ApiService                    *RolesByIDAPIService
	realm                         string
	roleId                        string
	managementPermissionReference *ManagementPermissionReference
}

func (r RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdManagementPermissionsPutRequest) ManagementPermissionReference(managementPermissionReference ManagementPermissionReference) RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdManagementPermissionsPutRequest {
	r.managementPermissionReference = &managementPermissionReference
	return r
}

func (r RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdManagementPermissionsPutRequest) Execute() (*ManagementPermissionReference, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmRolesByIdRoleIdManagementPermissionsPutExecute(r)
}

/*
AdminRealmsRealmRolesByIdRoleIdManagementPermissionsPut Return object stating whether role Authorization permissions have been initialized or not and a reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param roleId
	@return RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdManagementPermissionsPutRequest
*/
func (a *RolesByIDAPIService) AdminRealmsRealmRolesByIdRoleIdManagementPermissionsPut(ctx context.Context, realm string, roleId string) RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdManagementPermissionsPutRequest {
	return RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdManagementPermissionsPutRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		roleId:     roleId,
	}
}

// Execute executes the request
//
//	@return ManagementPermissionReference
func (a *RolesByIDAPIService) AdminRealmsRealmRolesByIdRoleIdManagementPermissionsPutExecute(r RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdManagementPermissionsPutRequest) (*ManagementPermissionReference, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ManagementPermissionReference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RolesByIDAPIService.AdminRealmsRealmRolesByIdRoleIdManagementPermissionsPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/roles-by-id/{role-id}/management/permissions"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"role-id"+"}", url.PathEscape(parameterValueToString(r.roleId, "roleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.managementPermissionReference
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdPutRequest struct {
	ctx                context.Context
	ApiService         *RolesByIDAPIService
	realm              string
	roleId             string
	roleRepresentation *RoleRepresentation
}

func (r RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdPutRequest) RoleRepresentation(roleRepresentation RoleRepresentation) RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdPutRequest {
	r.roleRepresentation = &roleRepresentation
	return r
}

func (r RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmRolesByIdRoleIdPutExecute(r)
}

/*
AdminRealmsRealmRolesByIdRoleIdPut Update the role

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param roleId id of role
	@return RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdPutRequest
*/
func (a *RolesByIDAPIService) AdminRealmsRealmRolesByIdRoleIdPut(ctx context.Context, realm string, roleId string) RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdPutRequest {
	return RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdPutRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		roleId:     roleId,
	}
}

// Execute executes the request
func (a *RolesByIDAPIService) AdminRealmsRealmRolesByIdRoleIdPutExecute(r RolesByIDAPIAdminRealmsRealmRolesByIdRoleIdPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RolesByIDAPIService.AdminRealmsRealmRolesByIdRoleIdPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/roles-by-id/{role-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"role-id"+"}", url.PathEscape(parameterValueToString(r.roleId, "roleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.roleRepresentation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
