/*
Keycloak Admin REST API

Testing UsersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package main

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/miguoliang/keycloakadminclient"
)

func Test_main_UsersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test UsersAPIService AdminRealmsRealmUsersCountGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string

		resp, httpRes, err := apiClient.UsersAPI.AdminRealmsRealmUsersCountGet(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AdminRealmsRealmUsersGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string

		resp, httpRes, err := apiClient.UsersAPI.AdminRealmsRealmUsersGet(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AdminRealmsRealmUsersPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string

		httpRes, err := apiClient.UsersAPI.AdminRealmsRealmUsersPost(context.Background(), realm).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AdminRealmsRealmUsersProfileGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string

		resp, httpRes, err := apiClient.UsersAPI.AdminRealmsRealmUsersProfileGet(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AdminRealmsRealmUsersProfileMetadataGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string

		resp, httpRes, err := apiClient.UsersAPI.AdminRealmsRealmUsersProfileMetadataGet(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AdminRealmsRealmUsersProfilePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string

		resp, httpRes, err := apiClient.UsersAPI.AdminRealmsRealmUsersProfilePut(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string

		resp, httpRes, err := apiClient.UsersAPI.AdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesGet(context.Background(), realm, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AdminRealmsRealmUsersUserIdConsentsClientDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string
		var client string

		httpRes, err := apiClient.UsersAPI.AdminRealmsRealmUsersUserIdConsentsClientDelete(context.Background(), realm, userId, client).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AdminRealmsRealmUsersUserIdConsentsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string

		resp, httpRes, err := apiClient.UsersAPI.AdminRealmsRealmUsersUserIdConsentsGet(context.Background(), realm, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AdminRealmsRealmUsersUserIdCredentialsCredentialIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string
		var credentialId string

		httpRes, err := apiClient.UsersAPI.AdminRealmsRealmUsersUserIdCredentialsCredentialIdDelete(context.Background(), realm, userId, credentialId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string
		var credentialId string
		var newPreviousCredentialId string

		httpRes, err := apiClient.UsersAPI.AdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPost(context.Background(), realm, userId, credentialId, newPreviousCredentialId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string
		var credentialId string

		httpRes, err := apiClient.UsersAPI.AdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPost(context.Background(), realm, userId, credentialId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string
		var credentialId string

		httpRes, err := apiClient.UsersAPI.AdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPut(context.Background(), realm, userId, credentialId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AdminRealmsRealmUsersUserIdCredentialsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string

		resp, httpRes, err := apiClient.UsersAPI.AdminRealmsRealmUsersUserIdCredentialsGet(context.Background(), realm, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AdminRealmsRealmUsersUserIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string

		httpRes, err := apiClient.UsersAPI.AdminRealmsRealmUsersUserIdDelete(context.Background(), realm, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AdminRealmsRealmUsersUserIdDisableCredentialTypesPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string

		httpRes, err := apiClient.UsersAPI.AdminRealmsRealmUsersUserIdDisableCredentialTypesPut(context.Background(), realm, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AdminRealmsRealmUsersUserIdExecuteActionsEmailPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string

		httpRes, err := apiClient.UsersAPI.AdminRealmsRealmUsersUserIdExecuteActionsEmailPut(context.Background(), realm, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AdminRealmsRealmUsersUserIdFederatedIdentityGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string

		resp, httpRes, err := apiClient.UsersAPI.AdminRealmsRealmUsersUserIdFederatedIdentityGet(context.Background(), realm, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AdminRealmsRealmUsersUserIdFederatedIdentityProviderDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string
		var provider string

		httpRes, err := apiClient.UsersAPI.AdminRealmsRealmUsersUserIdFederatedIdentityProviderDelete(context.Background(), realm, userId, provider).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AdminRealmsRealmUsersUserIdFederatedIdentityProviderPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string
		var provider string

		httpRes, err := apiClient.UsersAPI.AdminRealmsRealmUsersUserIdFederatedIdentityProviderPost(context.Background(), realm, userId, provider).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AdminRealmsRealmUsersUserIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string

		resp, httpRes, err := apiClient.UsersAPI.AdminRealmsRealmUsersUserIdGet(context.Background(), realm, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AdminRealmsRealmUsersUserIdGroupsCountGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string

		resp, httpRes, err := apiClient.UsersAPI.AdminRealmsRealmUsersUserIdGroupsCountGet(context.Background(), realm, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AdminRealmsRealmUsersUserIdGroupsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string

		resp, httpRes, err := apiClient.UsersAPI.AdminRealmsRealmUsersUserIdGroupsGet(context.Background(), realm, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AdminRealmsRealmUsersUserIdGroupsGroupIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string
		var groupId string

		httpRes, err := apiClient.UsersAPI.AdminRealmsRealmUsersUserIdGroupsGroupIdDelete(context.Background(), realm, userId, groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AdminRealmsRealmUsersUserIdGroupsGroupIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string
		var groupId string

		httpRes, err := apiClient.UsersAPI.AdminRealmsRealmUsersUserIdGroupsGroupIdPut(context.Background(), realm, userId, groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AdminRealmsRealmUsersUserIdImpersonationPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string

		resp, httpRes, err := apiClient.UsersAPI.AdminRealmsRealmUsersUserIdImpersonationPost(context.Background(), realm, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AdminRealmsRealmUsersUserIdLogoutPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string

		httpRes, err := apiClient.UsersAPI.AdminRealmsRealmUsersUserIdLogoutPost(context.Background(), realm, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AdminRealmsRealmUsersUserIdOfflineSessionsClientUuidGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string
		var clientUuid string

		resp, httpRes, err := apiClient.UsersAPI.AdminRealmsRealmUsersUserIdOfflineSessionsClientUuidGet(context.Background(), realm, userId, clientUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AdminRealmsRealmUsersUserIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string

		httpRes, err := apiClient.UsersAPI.AdminRealmsRealmUsersUserIdPut(context.Background(), realm, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AdminRealmsRealmUsersUserIdResetPasswordEmailPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string

		httpRes, err := apiClient.UsersAPI.AdminRealmsRealmUsersUserIdResetPasswordEmailPut(context.Background(), realm, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AdminRealmsRealmUsersUserIdResetPasswordPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string

		httpRes, err := apiClient.UsersAPI.AdminRealmsRealmUsersUserIdResetPasswordPut(context.Background(), realm, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AdminRealmsRealmUsersUserIdSendVerifyEmailPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string

		httpRes, err := apiClient.UsersAPI.AdminRealmsRealmUsersUserIdSendVerifyEmailPut(context.Background(), realm, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AdminRealmsRealmUsersUserIdSessionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string

		resp, httpRes, err := apiClient.UsersAPI.AdminRealmsRealmUsersUserIdSessionsGet(context.Background(), realm, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
