/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keycloakadminclient

import (
	"encoding/json"
)

// checks if the PolicyEvaluationResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyEvaluationResponse{}

// PolicyEvaluationResponse struct for PolicyEvaluationResponse
type PolicyEvaluationResponse struct {
	Results []EvaluationResultRepresentation `json:"results,omitempty"`
	Entitlements *bool `json:"entitlements,omitempty"`
	Status *DecisionEffect `json:"status,omitempty"`
	Rpt *AccessToken `json:"rpt,omitempty"`
}

// NewPolicyEvaluationResponse instantiates a new PolicyEvaluationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyEvaluationResponse() *PolicyEvaluationResponse {
	this := PolicyEvaluationResponse{}
	return &this
}

// NewPolicyEvaluationResponseWithDefaults instantiates a new PolicyEvaluationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyEvaluationResponseWithDefaults() *PolicyEvaluationResponse {
	this := PolicyEvaluationResponse{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *PolicyEvaluationResponse) GetResults() []EvaluationResultRepresentation {
	if o == nil || IsNil(o.Results) {
		var ret []EvaluationResultRepresentation
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyEvaluationResponse) GetResultsOk() ([]EvaluationResultRepresentation, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *PolicyEvaluationResponse) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []EvaluationResultRepresentation and assigns it to the Results field.
func (o *PolicyEvaluationResponse) SetResults(v []EvaluationResultRepresentation) {
	o.Results = v
}

// GetEntitlements returns the Entitlements field value if set, zero value otherwise.
func (o *PolicyEvaluationResponse) GetEntitlements() bool {
	if o == nil || IsNil(o.Entitlements) {
		var ret bool
		return ret
	}
	return *o.Entitlements
}

// GetEntitlementsOk returns a tuple with the Entitlements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyEvaluationResponse) GetEntitlementsOk() (*bool, bool) {
	if o == nil || IsNil(o.Entitlements) {
		return nil, false
	}
	return o.Entitlements, true
}

// HasEntitlements returns a boolean if a field has been set.
func (o *PolicyEvaluationResponse) HasEntitlements() bool {
	if o != nil && !IsNil(o.Entitlements) {
		return true
	}

	return false
}

// SetEntitlements gets a reference to the given bool and assigns it to the Entitlements field.
func (o *PolicyEvaluationResponse) SetEntitlements(v bool) {
	o.Entitlements = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PolicyEvaluationResponse) GetStatus() DecisionEffect {
	if o == nil || IsNil(o.Status) {
		var ret DecisionEffect
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyEvaluationResponse) GetStatusOk() (*DecisionEffect, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PolicyEvaluationResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given DecisionEffect and assigns it to the Status field.
func (o *PolicyEvaluationResponse) SetStatus(v DecisionEffect) {
	o.Status = &v
}

// GetRpt returns the Rpt field value if set, zero value otherwise.
func (o *PolicyEvaluationResponse) GetRpt() AccessToken {
	if o == nil || IsNil(o.Rpt) {
		var ret AccessToken
		return ret
	}
	return *o.Rpt
}

// GetRptOk returns a tuple with the Rpt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyEvaluationResponse) GetRptOk() (*AccessToken, bool) {
	if o == nil || IsNil(o.Rpt) {
		return nil, false
	}
	return o.Rpt, true
}

// HasRpt returns a boolean if a field has been set.
func (o *PolicyEvaluationResponse) HasRpt() bool {
	if o != nil && !IsNil(o.Rpt) {
		return true
	}

	return false
}

// SetRpt gets a reference to the given AccessToken and assigns it to the Rpt field.
func (o *PolicyEvaluationResponse) SetRpt(v AccessToken) {
	o.Rpt = &v
}

func (o PolicyEvaluationResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyEvaluationResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	if !IsNil(o.Entitlements) {
		toSerialize["entitlements"] = o.Entitlements
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Rpt) {
		toSerialize["rpt"] = o.Rpt
	}
	return toSerialize, nil
}

type NullablePolicyEvaluationResponse struct {
	value *PolicyEvaluationResponse
	isSet bool
}

func (v NullablePolicyEvaluationResponse) Get() *PolicyEvaluationResponse {
	return v.value
}

func (v *NullablePolicyEvaluationResponse) Set(val *PolicyEvaluationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyEvaluationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyEvaluationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyEvaluationResponse(val *PolicyEvaluationResponse) *NullablePolicyEvaluationResponse {
	return &NullablePolicyEvaluationResponse{value: val, isSet: true}
}

func (v NullablePolicyEvaluationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyEvaluationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


