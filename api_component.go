/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keycloakadminclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ComponentAPIService ComponentAPI service
type ComponentAPIService service

type ComponentAPIAdminRealmsRealmComponentsGetRequest struct {
	ctx context.Context
	ApiService *ComponentAPIService
	realm string
	name *string
	parent *string
	type_ *string
}

func (r ComponentAPIAdminRealmsRealmComponentsGetRequest) Name(name string) ComponentAPIAdminRealmsRealmComponentsGetRequest {
	r.name = &name
	return r
}

func (r ComponentAPIAdminRealmsRealmComponentsGetRequest) Parent(parent string) ComponentAPIAdminRealmsRealmComponentsGetRequest {
	r.parent = &parent
	return r
}

func (r ComponentAPIAdminRealmsRealmComponentsGetRequest) Type_(type_ string) ComponentAPIAdminRealmsRealmComponentsGetRequest {
	r.type_ = &type_
	return r
}

func (r ComponentAPIAdminRealmsRealmComponentsGetRequest) Execute() ([]ComponentRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmComponentsGetExecute(r)
}

/*
AdminRealmsRealmComponentsGet Method for AdminRealmsRealmComponentsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @return ComponentAPIAdminRealmsRealmComponentsGetRequest
*/
func (a *ComponentAPIService) AdminRealmsRealmComponentsGet(ctx context.Context, realm string) ComponentAPIAdminRealmsRealmComponentsGetRequest {
	return ComponentAPIAdminRealmsRealmComponentsGetRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
	}
}

// Execute executes the request
//  @return []ComponentRepresentation
func (a *ComponentAPIService) AdminRealmsRealmComponentsGetExecute(r ComponentAPIAdminRealmsRealmComponentsGetRequest) ([]ComponentRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ComponentRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentAPIService.AdminRealmsRealmComponentsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/components"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.parent != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "parent", r.parent, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ComponentAPIAdminRealmsRealmComponentsIdDeleteRequest struct {
	ctx context.Context
	ApiService *ComponentAPIService
	realm string
	id string
}

func (r ComponentAPIAdminRealmsRealmComponentsIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmComponentsIdDeleteExecute(r)
}

/*
AdminRealmsRealmComponentsIdDelete Method for AdminRealmsRealmComponentsIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param id
 @return ComponentAPIAdminRealmsRealmComponentsIdDeleteRequest
*/
func (a *ComponentAPIService) AdminRealmsRealmComponentsIdDelete(ctx context.Context, realm string, id string) ComponentAPIAdminRealmsRealmComponentsIdDeleteRequest {
	return ComponentAPIAdminRealmsRealmComponentsIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		id: id,
	}
}

// Execute executes the request
func (a *ComponentAPIService) AdminRealmsRealmComponentsIdDeleteExecute(r ComponentAPIAdminRealmsRealmComponentsIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentAPIService.AdminRealmsRealmComponentsIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/components/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ComponentAPIAdminRealmsRealmComponentsIdGetRequest struct {
	ctx context.Context
	ApiService *ComponentAPIService
	realm string
	id string
}

func (r ComponentAPIAdminRealmsRealmComponentsIdGetRequest) Execute() (*ComponentRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmComponentsIdGetExecute(r)
}

/*
AdminRealmsRealmComponentsIdGet Method for AdminRealmsRealmComponentsIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param id
 @return ComponentAPIAdminRealmsRealmComponentsIdGetRequest
*/
func (a *ComponentAPIService) AdminRealmsRealmComponentsIdGet(ctx context.Context, realm string, id string) ComponentAPIAdminRealmsRealmComponentsIdGetRequest {
	return ComponentAPIAdminRealmsRealmComponentsIdGetRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		id: id,
	}
}

// Execute executes the request
//  @return ComponentRepresentation
func (a *ComponentAPIService) AdminRealmsRealmComponentsIdGetExecute(r ComponentAPIAdminRealmsRealmComponentsIdGetRequest) (*ComponentRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComponentRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentAPIService.AdminRealmsRealmComponentsIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/components/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ComponentAPIAdminRealmsRealmComponentsIdPutRequest struct {
	ctx context.Context
	ApiService *ComponentAPIService
	realm string
	id string
	componentRepresentation *ComponentRepresentation
}

func (r ComponentAPIAdminRealmsRealmComponentsIdPutRequest) ComponentRepresentation(componentRepresentation ComponentRepresentation) ComponentAPIAdminRealmsRealmComponentsIdPutRequest {
	r.componentRepresentation = &componentRepresentation
	return r
}

func (r ComponentAPIAdminRealmsRealmComponentsIdPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmComponentsIdPutExecute(r)
}

/*
AdminRealmsRealmComponentsIdPut Method for AdminRealmsRealmComponentsIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param id
 @return ComponentAPIAdminRealmsRealmComponentsIdPutRequest
*/
func (a *ComponentAPIService) AdminRealmsRealmComponentsIdPut(ctx context.Context, realm string, id string) ComponentAPIAdminRealmsRealmComponentsIdPutRequest {
	return ComponentAPIAdminRealmsRealmComponentsIdPutRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		id: id,
	}
}

// Execute executes the request
func (a *ComponentAPIService) AdminRealmsRealmComponentsIdPutExecute(r ComponentAPIAdminRealmsRealmComponentsIdPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentAPIService.AdminRealmsRealmComponentsIdPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/components/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.componentRepresentation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ComponentAPIAdminRealmsRealmComponentsIdSubComponentTypesGetRequest struct {
	ctx context.Context
	ApiService *ComponentAPIService
	realm string
	id string
	type_ *string
}

func (r ComponentAPIAdminRealmsRealmComponentsIdSubComponentTypesGetRequest) Type_(type_ string) ComponentAPIAdminRealmsRealmComponentsIdSubComponentTypesGetRequest {
	r.type_ = &type_
	return r
}

func (r ComponentAPIAdminRealmsRealmComponentsIdSubComponentTypesGetRequest) Execute() ([]ComponentTypeRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmComponentsIdSubComponentTypesGetExecute(r)
}

/*
AdminRealmsRealmComponentsIdSubComponentTypesGet List of subcomponent types that are available to configure for a particular parent component.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param id
 @return ComponentAPIAdminRealmsRealmComponentsIdSubComponentTypesGetRequest
*/
func (a *ComponentAPIService) AdminRealmsRealmComponentsIdSubComponentTypesGet(ctx context.Context, realm string, id string) ComponentAPIAdminRealmsRealmComponentsIdSubComponentTypesGetRequest {
	return ComponentAPIAdminRealmsRealmComponentsIdSubComponentTypesGetRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		id: id,
	}
}

// Execute executes the request
//  @return []ComponentTypeRepresentation
func (a *ComponentAPIService) AdminRealmsRealmComponentsIdSubComponentTypesGetExecute(r ComponentAPIAdminRealmsRealmComponentsIdSubComponentTypesGetRequest) ([]ComponentTypeRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ComponentTypeRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentAPIService.AdminRealmsRealmComponentsIdSubComponentTypesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/components/{id}/sub-component-types"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ComponentAPIAdminRealmsRealmComponentsPostRequest struct {
	ctx context.Context
	ApiService *ComponentAPIService
	realm string
	componentRepresentation *ComponentRepresentation
}

func (r ComponentAPIAdminRealmsRealmComponentsPostRequest) ComponentRepresentation(componentRepresentation ComponentRepresentation) ComponentAPIAdminRealmsRealmComponentsPostRequest {
	r.componentRepresentation = &componentRepresentation
	return r
}

func (r ComponentAPIAdminRealmsRealmComponentsPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmComponentsPostExecute(r)
}

/*
AdminRealmsRealmComponentsPost Method for AdminRealmsRealmComponentsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @return ComponentAPIAdminRealmsRealmComponentsPostRequest
*/
func (a *ComponentAPIService) AdminRealmsRealmComponentsPost(ctx context.Context, realm string) ComponentAPIAdminRealmsRealmComponentsPostRequest {
	return ComponentAPIAdminRealmsRealmComponentsPostRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
	}
}

// Execute executes the request
func (a *ComponentAPIService) AdminRealmsRealmComponentsPostExecute(r ComponentAPIAdminRealmsRealmComponentsPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentAPIService.AdminRealmsRealmComponentsPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/components"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.componentRepresentation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
