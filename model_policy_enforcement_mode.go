/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keycloakadminclient

import (
	"encoding/json"
	"fmt"
)

// PolicyEnforcementMode the model 'PolicyEnforcementMode'
type PolicyEnforcementMode string

// List of PolicyEnforcementMode
const (
	ENFORCING PolicyEnforcementMode = "ENFORCING"
	PERMISSIVE PolicyEnforcementMode = "PERMISSIVE"
	DISABLED PolicyEnforcementMode = "DISABLED"
)

// All allowed values of PolicyEnforcementMode enum
var AllowedPolicyEnforcementModeEnumValues = []PolicyEnforcementMode{
	"ENFORCING",
	"PERMISSIVE",
	"DISABLED",
}

func (v *PolicyEnforcementMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PolicyEnforcementMode(value)
	for _, existing := range AllowedPolicyEnforcementModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PolicyEnforcementMode", value)
}

// NewPolicyEnforcementModeFromValue returns a pointer to a valid PolicyEnforcementMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPolicyEnforcementModeFromValue(v string) (*PolicyEnforcementMode, error) {
	ev := PolicyEnforcementMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PolicyEnforcementMode: valid values are %v", v, AllowedPolicyEnforcementModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PolicyEnforcementMode) IsValid() bool {
	for _, existing := range AllowedPolicyEnforcementModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PolicyEnforcementMode value
func (v PolicyEnforcementMode) Ptr() *PolicyEnforcementMode {
	return &v
}

type NullablePolicyEnforcementMode struct {
	value *PolicyEnforcementMode
	isSet bool
}

func (v NullablePolicyEnforcementMode) Get() *PolicyEnforcementMode {
	return v.value
}

func (v *NullablePolicyEnforcementMode) Set(val *PolicyEnforcementMode) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyEnforcementMode) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyEnforcementMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyEnforcementMode(val *PolicyEnforcementMode) *NullablePolicyEnforcementMode {
	return &NullablePolicyEnforcementMode{value: val, isSet: true}
}

func (v NullablePolicyEnforcementMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyEnforcementMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

