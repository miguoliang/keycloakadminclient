/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keycloakadminclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DefaultAPIService DefaultAPI service
type DefaultAPIService service

type ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	realm string
	clientUuid string
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerGetRequest) Execute() (*ResourceServerRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param clientUuid id of client (not client-id!)
 @return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerGet(ctx context.Context, realm string, clientUuid string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerGetRequest {
	return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerGetRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
//  @return ResourceServerRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerGetExecute(r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerGetRequest) (*ResourceServerRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResourceServerRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerImportPostRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	realm string
	clientUuid string
	resourceServerRepresentation *ResourceServerRepresentation
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerImportPostRequest) ResourceServerRepresentation(resourceServerRepresentation ResourceServerRepresentation) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerImportPostRequest {
	r.resourceServerRepresentation = &resourceServerRepresentation
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerImportPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerImportPostExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerImportPost Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerImportPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param clientUuid id of client (not client-id!)
 @return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerImportPostRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerImportPost(ctx context.Context, realm string, clientUuid string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerImportPostRequest {
	return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerImportPostRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerImportPostExecute(r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerImportPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerImportPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/import"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.resourceServerRepresentation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePostRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	realm string
	clientUuid string
	policyEvaluationRequest *PolicyEvaluationRequest
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePostRequest) PolicyEvaluationRequest(policyEvaluationRequest PolicyEvaluationRequest) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePostRequest {
	r.policyEvaluationRequest = &policyEvaluationRequest
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePostRequest) Execute() (*PolicyEvaluationResponse, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePostExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePost Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param clientUuid id of client (not client-id!)
 @return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePostRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePost(ctx context.Context, realm string, clientUuid string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePostRequest {
	return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePostRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
//  @return PolicyEvaluationResponse
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePostExecute(r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePostRequest) (*PolicyEvaluationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PolicyEvaluationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/permission/evaluate"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.policyEvaluationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	realm string
	clientUuid string
	fields *string
	first *int32
	max *int32
	name *string
	owner *string
	permission *bool
	policyId *string
	resource *string
	scope *string
	type_ *string
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest) Fields(fields string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest {
	r.fields = &fields
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest) First(first int32) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest {
	r.first = &first
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest) Max(max int32) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest {
	r.max = &max
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest) Name(name string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest {
	r.name = &name
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest) Owner(owner string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest {
	r.owner = &owner
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest) Permission(permission bool) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest {
	r.permission = &permission
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest) PolicyId(policyId string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest {
	r.policyId = &policyId
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest) Resource(resource string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest {
	r.resource = &resource
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest) Scope(scope string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest {
	r.scope = &scope
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest) Type_(type_ string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest {
	r.type_ = &type_
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest) Execute() ([]AbstractPolicyRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param clientUuid id of client (not client-id!)
 @return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGet(ctx context.Context, realm string, clientUuid string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest {
	return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
//  @return []AbstractPolicyRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetExecute(r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest) ([]AbstractPolicyRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AbstractPolicyRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/permission"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.first != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "first", r.first, "")
	}
	if r.max != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.owner != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner", r.owner, "")
	}
	if r.permission != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "permission", r.permission, "")
	}
	if r.policyId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "policyId", r.policyId, "")
	}
	if r.resource != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resource", r.resource, "")
	}
	if r.scope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scope", r.scope, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPostRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	realm string
	clientUuid string
	body *string
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPostRequest) Body(body string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPostRequest {
	r.body = &body
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPostExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPost Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param clientUuid id of client (not client-id!)
 @return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPostRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPost(ctx context.Context, realm string, clientUuid string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPostRequest {
	return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPostRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPostExecute(r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/permission"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	realm string
	clientUuid string
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGetRequest) Execute() ([]PolicyProviderRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param clientUuid id of client (not client-id!)
 @return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGet(ctx context.Context, realm string, clientUuid string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGetRequest {
	return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGetRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
//  @return []PolicyProviderRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGetExecute(r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGetRequest) ([]PolicyProviderRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PolicyProviderRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/permission/providers"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	realm string
	clientUuid string
	fields *string
	name *string
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetRequest) Fields(fields string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetRequest {
	r.fields = &fields
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetRequest) Name(name string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetRequest {
	r.name = &name
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetRequest) Execute() (*AbstractPolicyRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param clientUuid id of client (not client-id!)
 @return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGet(ctx context.Context, realm string, clientUuid string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetRequest {
	return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
//  @return AbstractPolicyRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetExecute(r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetRequest) (*AbstractPolicyRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AbstractPolicyRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/permission/search"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePostRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	realm string
	clientUuid string
	policyEvaluationRequest *PolicyEvaluationRequest
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePostRequest) PolicyEvaluationRequest(policyEvaluationRequest PolicyEvaluationRequest) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePostRequest {
	r.policyEvaluationRequest = &policyEvaluationRequest
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePostRequest) Execute() (*PolicyEvaluationResponse, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePostExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePost Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param clientUuid id of client (not client-id!)
 @return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePostRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePost(ctx context.Context, realm string, clientUuid string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePostRequest {
	return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePostRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
//  @return PolicyEvaluationResponse
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePostExecute(r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePostRequest) (*PolicyEvaluationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PolicyEvaluationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/policy/evaluate"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.policyEvaluationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	realm string
	clientUuid string
	fields *string
	first *int32
	max *int32
	name *string
	owner *string
	permission *bool
	policyId *string
	resource *string
	scope *string
	type_ *string
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest) Fields(fields string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest {
	r.fields = &fields
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest) First(first int32) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest {
	r.first = &first
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest) Max(max int32) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest {
	r.max = &max
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest) Name(name string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest {
	r.name = &name
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest) Owner(owner string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest {
	r.owner = &owner
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest) Permission(permission bool) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest {
	r.permission = &permission
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest) PolicyId(policyId string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest {
	r.policyId = &policyId
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest) Resource(resource string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest {
	r.resource = &resource
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest) Scope(scope string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest {
	r.scope = &scope
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest) Type_(type_ string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest {
	r.type_ = &type_
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest) Execute() ([]AbstractPolicyRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param clientUuid id of client (not client-id!)
 @return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGet(ctx context.Context, realm string, clientUuid string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest {
	return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
//  @return []AbstractPolicyRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetExecute(r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest) ([]AbstractPolicyRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AbstractPolicyRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/policy"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.first != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "first", r.first, "")
	}
	if r.max != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.owner != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner", r.owner, "")
	}
	if r.permission != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "permission", r.permission, "")
	}
	if r.policyId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "policyId", r.policyId, "")
	}
	if r.resource != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resource", r.resource, "")
	}
	if r.scope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scope", r.scope, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPostRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	realm string
	clientUuid string
	body *string
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPostRequest) Body(body string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPostRequest {
	r.body = &body
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPostExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPost Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param clientUuid id of client (not client-id!)
 @return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPostRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPost(ctx context.Context, realm string, clientUuid string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPostRequest {
	return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPostRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPostExecute(r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/policy"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	realm string
	clientUuid string
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGetRequest) Execute() ([]PolicyProviderRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param clientUuid id of client (not client-id!)
 @return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGet(ctx context.Context, realm string, clientUuid string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGetRequest {
	return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGetRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
//  @return []PolicyProviderRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGetExecute(r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGetRequest) ([]PolicyProviderRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PolicyProviderRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/policy/providers"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	realm string
	clientUuid string
	fields *string
	name *string
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetRequest) Fields(fields string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetRequest {
	r.fields = &fields
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetRequest) Name(name string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetRequest {
	r.name = &name
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetRequest) Execute() (*AbstractPolicyRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param clientUuid id of client (not client-id!)
 @return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGet(ctx context.Context, realm string, clientUuid string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetRequest {
	return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
//  @return AbstractPolicyRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetExecute(r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetRequest) (*AbstractPolicyRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AbstractPolicyRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/policy/search"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPutRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	realm string
	clientUuid string
	resourceServerRepresentation *ResourceServerRepresentation
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPutRequest) ResourceServerRepresentation(resourceServerRepresentation ResourceServerRepresentation) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPutRequest {
	r.resourceServerRepresentation = &resourceServerRepresentation
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPutExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerPut Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param clientUuid id of client (not client-id!)
 @return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPutRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPut(ctx context.Context, realm string, clientUuid string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPutRequest {
	return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPutRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPutExecute(r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.resourceServerRepresentation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	realm string
	clientUuid string
	id *string
	deep *bool
	exactName *bool
	first *int32
	matchingUri *bool
	max *int32
	name *string
	owner *string
	scope *string
	type_ *string
	uri *string
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest) Id(id string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest {
	r.id = &id
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest) Deep(deep bool) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest {
	r.deep = &deep
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest) ExactName(exactName bool) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest {
	r.exactName = &exactName
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest) First(first int32) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest {
	r.first = &first
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest) MatchingUri(matchingUri bool) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest {
	r.matchingUri = &matchingUri
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest) Max(max int32) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest {
	r.max = &max
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest) Name(name string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest {
	r.name = &name
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest) Owner(owner string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest {
	r.owner = &owner
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest) Scope(scope string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest {
	r.scope = &scope
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest) Type_(type_ string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest {
	r.type_ = &type_
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest) Uri(uri string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest {
	r.uri = &uri
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest) Execute() ([]ResourceRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param clientUuid id of client (not client-id!)
 @return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGet(ctx context.Context, realm string, clientUuid string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest {
	return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
//  @return []ResourceRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetExecute(r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest) ([]ResourceRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ResourceRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "_id", r.id, "")
	}
	if r.deep != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deep", r.deep, "")
	}
	if r.exactName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exactName", r.exactName, "")
	}
	if r.first != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "first", r.first, "")
	}
	if r.matchingUri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "matchingUri", r.matchingUri, "")
	}
	if r.max != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.owner != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner", r.owner, "")
	}
	if r.scope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scope", r.scope, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.uri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uri", r.uri, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	realm string
	clientUuid string
	id *string
	deep *bool
	exactName *bool
	first *int32
	matchingUri *bool
	max *int32
	name *string
	owner *string
	scope *string
	type_ *string
	uri *string
	resourceRepresentation *ResourceRepresentation
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest) Id(id string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest {
	r.id = &id
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest) Deep(deep bool) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest {
	r.deep = &deep
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest) ExactName(exactName bool) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest {
	r.exactName = &exactName
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest) First(first int32) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest {
	r.first = &first
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest) MatchingUri(matchingUri bool) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest {
	r.matchingUri = &matchingUri
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest) Max(max int32) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest {
	r.max = &max
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest) Name(name string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest {
	r.name = &name
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest) Owner(owner string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest {
	r.owner = &owner
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest) Scope(scope string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest {
	r.scope = &scope
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest) Type_(type_ string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest {
	r.type_ = &type_
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest) Uri(uri string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest {
	r.uri = &uri
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest) ResourceRepresentation(resourceRepresentation ResourceRepresentation) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest {
	r.resourceRepresentation = &resourceRepresentation
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest) Execute() (*ResourceRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePost Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param clientUuid id of client (not client-id!)
 @return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePost(ctx context.Context, realm string, clientUuid string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest {
	return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
//  @return ResourceRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostExecute(r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest) (*ResourceRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResourceRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "_id", r.id, "")
	}
	if r.deep != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deep", r.deep, "")
	}
	if r.exactName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exactName", r.exactName, "")
	}
	if r.first != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "first", r.first, "")
	}
	if r.matchingUri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "matchingUri", r.matchingUri, "")
	}
	if r.max != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.owner != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner", r.owner, "")
	}
	if r.scope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scope", r.scope, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.uri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uri", r.uri, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.resourceRepresentation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	realm string
	clientUuid string
	resourceId string
	id *string
	deep *bool
	exactName *bool
	first *int32
	matchingUri *bool
	max *int32
	name *string
	owner *string
	scope *string
	type_ *string
	uri *string
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest) Id(id string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest {
	r.id = &id
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest) Deep(deep bool) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest {
	r.deep = &deep
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest) ExactName(exactName bool) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest {
	r.exactName = &exactName
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest) First(first int32) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest {
	r.first = &first
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest) MatchingUri(matchingUri bool) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest {
	r.matchingUri = &matchingUri
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest) Max(max int32) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest {
	r.max = &max
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest) Name(name string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest {
	r.name = &name
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest) Owner(owner string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest {
	r.owner = &owner
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest) Scope(scope string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest {
	r.scope = &scope
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest) Type_(type_ string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest {
	r.type_ = &type_
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest) Uri(uri string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest {
	r.uri = &uri
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param clientUuid id of client (not client-id!)
 @param resourceId
 @return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGet(ctx context.Context, realm string, clientUuid string, resourceId string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest {
	return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		clientUuid: clientUuid,
		resourceId: resourceId,
	}
}

// Execute executes the request
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetExecute(r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/{resource-id}/attributes"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource-id"+"}", url.PathEscape(parameterValueToString(r.resourceId, "resourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "_id", r.id, "")
	}
	if r.deep != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deep", r.deep, "")
	}
	if r.exactName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exactName", r.exactName, "")
	}
	if r.first != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "first", r.first, "")
	}
	if r.matchingUri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "matchingUri", r.matchingUri, "")
	}
	if r.max != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.owner != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner", r.owner, "")
	}
	if r.scope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scope", r.scope, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.uri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uri", r.uri, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	realm string
	clientUuid string
	resourceId string
	id *string
	deep *bool
	exactName *bool
	first *int32
	matchingUri *bool
	max *int32
	name *string
	owner *string
	scope *string
	type_ *string
	uri *string
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest) Id(id string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest {
	r.id = &id
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest) Deep(deep bool) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest {
	r.deep = &deep
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest) ExactName(exactName bool) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest {
	r.exactName = &exactName
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest) First(first int32) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest {
	r.first = &first
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest) MatchingUri(matchingUri bool) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest {
	r.matchingUri = &matchingUri
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest) Max(max int32) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest {
	r.max = &max
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest) Name(name string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest {
	r.name = &name
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest) Owner(owner string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest {
	r.owner = &owner
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest) Scope(scope string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest {
	r.scope = &scope
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest) Type_(type_ string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest {
	r.type_ = &type_
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest) Uri(uri string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest {
	r.uri = &uri
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDelete Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param clientUuid id of client (not client-id!)
 @param resourceId
 @return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDelete(ctx context.Context, realm string, clientUuid string, resourceId string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest {
	return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		clientUuid: clientUuid,
		resourceId: resourceId,
	}
}

// Execute executes the request
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteExecute(r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/{resource-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource-id"+"}", url.PathEscape(parameterValueToString(r.resourceId, "resourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "_id", r.id, "")
	}
	if r.deep != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deep", r.deep, "")
	}
	if r.exactName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exactName", r.exactName, "")
	}
	if r.first != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "first", r.first, "")
	}
	if r.matchingUri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "matchingUri", r.matchingUri, "")
	}
	if r.max != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.owner != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner", r.owner, "")
	}
	if r.scope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scope", r.scope, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.uri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uri", r.uri, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	realm string
	clientUuid string
	resourceId string
	id *string
	deep *bool
	exactName *bool
	first *int32
	matchingUri *bool
	max *int32
	name *string
	owner *string
	scope *string
	type_ *string
	uri *string
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest) Id(id string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest {
	r.id = &id
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest) Deep(deep bool) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest {
	r.deep = &deep
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest) ExactName(exactName bool) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest {
	r.exactName = &exactName
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest) First(first int32) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest {
	r.first = &first
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest) MatchingUri(matchingUri bool) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest {
	r.matchingUri = &matchingUri
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest) Max(max int32) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest {
	r.max = &max
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest) Name(name string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest {
	r.name = &name
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest) Owner(owner string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest {
	r.owner = &owner
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest) Scope(scope string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest {
	r.scope = &scope
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest) Type_(type_ string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest {
	r.type_ = &type_
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest) Uri(uri string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest {
	r.uri = &uri
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest) Execute() (*ResourceRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param clientUuid id of client (not client-id!)
 @param resourceId
 @return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGet(ctx context.Context, realm string, clientUuid string, resourceId string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest {
	return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		clientUuid: clientUuid,
		resourceId: resourceId,
	}
}

// Execute executes the request
//  @return ResourceRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetExecute(r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest) (*ResourceRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResourceRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/{resource-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource-id"+"}", url.PathEscape(parameterValueToString(r.resourceId, "resourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "_id", r.id, "")
	}
	if r.deep != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deep", r.deep, "")
	}
	if r.exactName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exactName", r.exactName, "")
	}
	if r.first != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "first", r.first, "")
	}
	if r.matchingUri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "matchingUri", r.matchingUri, "")
	}
	if r.max != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.owner != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner", r.owner, "")
	}
	if r.scope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scope", r.scope, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.uri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uri", r.uri, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	realm string
	clientUuid string
	resourceId string
	id *string
	deep *bool
	exactName *bool
	first *int32
	matchingUri *bool
	max *int32
	name *string
	owner *string
	scope *string
	type_ *string
	uri *string
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest) Id(id string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest {
	r.id = &id
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest) Deep(deep bool) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest {
	r.deep = &deep
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest) ExactName(exactName bool) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest {
	r.exactName = &exactName
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest) First(first int32) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest {
	r.first = &first
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest) MatchingUri(matchingUri bool) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest {
	r.matchingUri = &matchingUri
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest) Max(max int32) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest {
	r.max = &max
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest) Name(name string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest {
	r.name = &name
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest) Owner(owner string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest {
	r.owner = &owner
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest) Scope(scope string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest {
	r.scope = &scope
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest) Type_(type_ string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest {
	r.type_ = &type_
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest) Uri(uri string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest {
	r.uri = &uri
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest) Execute() ([]PolicyRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param clientUuid id of client (not client-id!)
 @param resourceId
 @return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGet(ctx context.Context, realm string, clientUuid string, resourceId string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest {
	return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		clientUuid: clientUuid,
		resourceId: resourceId,
	}
}

// Execute executes the request
//  @return []PolicyRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetExecute(r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest) ([]PolicyRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PolicyRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/{resource-id}/permissions"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource-id"+"}", url.PathEscape(parameterValueToString(r.resourceId, "resourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "_id", r.id, "")
	}
	if r.deep != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deep", r.deep, "")
	}
	if r.exactName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exactName", r.exactName, "")
	}
	if r.first != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "first", r.first, "")
	}
	if r.matchingUri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "matchingUri", r.matchingUri, "")
	}
	if r.max != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.owner != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner", r.owner, "")
	}
	if r.scope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scope", r.scope, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.uri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uri", r.uri, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	realm string
	clientUuid string
	resourceId string
	id *string
	deep *bool
	exactName *bool
	first *int32
	matchingUri *bool
	max *int32
	name *string
	owner *string
	scope *string
	type_ *string
	uri *string
	resourceRepresentation *ResourceRepresentation
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest) Id(id string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest {
	r.id = &id
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest) Deep(deep bool) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest {
	r.deep = &deep
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest) ExactName(exactName bool) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest {
	r.exactName = &exactName
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest) First(first int32) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest {
	r.first = &first
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest) MatchingUri(matchingUri bool) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest {
	r.matchingUri = &matchingUri
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest) Max(max int32) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest {
	r.max = &max
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest) Name(name string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest {
	r.name = &name
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest) Owner(owner string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest {
	r.owner = &owner
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest) Scope(scope string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest {
	r.scope = &scope
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest) Type_(type_ string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest {
	r.type_ = &type_
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest) Uri(uri string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest {
	r.uri = &uri
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest) ResourceRepresentation(resourceRepresentation ResourceRepresentation) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest {
	r.resourceRepresentation = &resourceRepresentation
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPut Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param clientUuid id of client (not client-id!)
 @param resourceId
 @return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPut(ctx context.Context, realm string, clientUuid string, resourceId string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest {
	return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		clientUuid: clientUuid,
		resourceId: resourceId,
	}
}

// Execute executes the request
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutExecute(r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/{resource-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource-id"+"}", url.PathEscape(parameterValueToString(r.resourceId, "resourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "_id", r.id, "")
	}
	if r.deep != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deep", r.deep, "")
	}
	if r.exactName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exactName", r.exactName, "")
	}
	if r.first != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "first", r.first, "")
	}
	if r.matchingUri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "matchingUri", r.matchingUri, "")
	}
	if r.max != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.owner != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner", r.owner, "")
	}
	if r.scope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scope", r.scope, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.uri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uri", r.uri, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.resourceRepresentation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	realm string
	clientUuid string
	resourceId string
	id *string
	deep *bool
	exactName *bool
	first *int32
	matchingUri *bool
	max *int32
	name *string
	owner *string
	scope *string
	type_ *string
	uri *string
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest) Id(id string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest {
	r.id = &id
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest) Deep(deep bool) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest {
	r.deep = &deep
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest) ExactName(exactName bool) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest {
	r.exactName = &exactName
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest) First(first int32) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest {
	r.first = &first
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest) MatchingUri(matchingUri bool) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest {
	r.matchingUri = &matchingUri
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest) Max(max int32) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest {
	r.max = &max
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest) Name(name string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest {
	r.name = &name
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest) Owner(owner string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest {
	r.owner = &owner
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest) Scope(scope string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest {
	r.scope = &scope
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest) Type_(type_ string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest {
	r.type_ = &type_
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest) Uri(uri string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest {
	r.uri = &uri
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest) Execute() ([]ScopeRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param clientUuid id of client (not client-id!)
 @param resourceId
 @return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGet(ctx context.Context, realm string, clientUuid string, resourceId string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest {
	return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		clientUuid: clientUuid,
		resourceId: resourceId,
	}
}

// Execute executes the request
//  @return []ScopeRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetExecute(r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest) ([]ScopeRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ScopeRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/{resource-id}/scopes"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource-id"+"}", url.PathEscape(parameterValueToString(r.resourceId, "resourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "_id", r.id, "")
	}
	if r.deep != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deep", r.deep, "")
	}
	if r.exactName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exactName", r.exactName, "")
	}
	if r.first != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "first", r.first, "")
	}
	if r.matchingUri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "matchingUri", r.matchingUri, "")
	}
	if r.max != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.owner != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner", r.owner, "")
	}
	if r.scope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scope", r.scope, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.uri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uri", r.uri, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	realm string
	clientUuid string
	id *string
	deep *bool
	exactName *bool
	first *int32
	matchingUri *bool
	max *int32
	owner *string
	scope *string
	type_ *string
	uri *string
	name *string
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest) Id(id string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest {
	r.id = &id
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest) Deep(deep bool) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest {
	r.deep = &deep
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest) ExactName(exactName bool) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest {
	r.exactName = &exactName
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest) First(first int32) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest {
	r.first = &first
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest) MatchingUri(matchingUri bool) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest {
	r.matchingUri = &matchingUri
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest) Max(max int32) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest {
	r.max = &max
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest) Owner(owner string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest {
	r.owner = &owner
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest) Scope(scope string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest {
	r.scope = &scope
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest) Type_(type_ string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest {
	r.type_ = &type_
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest) Uri(uri string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest {
	r.uri = &uri
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest) Name(name string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest {
	r.name = &name
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest) Execute() (*ResourceRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param clientUuid id of client (not client-id!)
 @return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGet(ctx context.Context, realm string, clientUuid string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest {
	return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
//  @return ResourceRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetExecute(r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest) (*ResourceRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResourceRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/search"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "_id", r.id, "")
	}
	if r.deep != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deep", r.deep, "")
	}
	if r.exactName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exactName", r.exactName, "")
	}
	if r.first != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "first", r.first, "")
	}
	if r.matchingUri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "matchingUri", r.matchingUri, "")
	}
	if r.max != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "")
	}
	if r.owner != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner", r.owner, "")
	}
	if r.scope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scope", r.scope, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.uri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uri", r.uri, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	realm string
	clientUuid string
	first *int32
	max *int32
	name *string
	scopeId *string
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetRequest) First(first int32) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetRequest {
	r.first = &first
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetRequest) Max(max int32) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetRequest {
	r.max = &max
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetRequest) Name(name string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetRequest {
	r.name = &name
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetRequest) ScopeId(scopeId string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetRequest {
	r.scopeId = &scopeId
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetRequest) Execute() ([]ScopeRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param clientUuid id of client (not client-id!)
 @return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGet(ctx context.Context, realm string, clientUuid string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetRequest {
	return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
//  @return []ScopeRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetExecute(r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetRequest) ([]ScopeRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ScopeRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.first != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "first", r.first, "")
	}
	if r.max != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.scopeId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scopeId", r.scopeId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopePostRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	realm string
	clientUuid string
	scopeRepresentation *ScopeRepresentation
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopePostRequest) ScopeRepresentation(scopeRepresentation ScopeRepresentation) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopePostRequest {
	r.scopeRepresentation = &scopeRepresentation
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopePostExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerScopePost Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerScopePost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param clientUuid id of client (not client-id!)
 @return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopePostRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerScopePost(ctx context.Context, realm string, clientUuid string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopePostRequest {
	return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopePostRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerScopePostExecute(r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.scopeRepresentation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDeleteRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	realm string
	clientUuid string
	scopeId string
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDeleteExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDelete Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param clientUuid id of client (not client-id!)
 @param scopeId
 @return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDeleteRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDelete(ctx context.Context, realm string, clientUuid string, scopeId string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDeleteRequest {
	return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		clientUuid: clientUuid,
		scopeId: scopeId,
	}
}

// Execute executes the request
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDeleteExecute(r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope/{scope-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scope-id"+"}", url.PathEscape(parameterValueToString(r.scopeId, "scopeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	realm string
	clientUuid string
	scopeId string
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGetRequest) Execute() (*ScopeRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param clientUuid id of client (not client-id!)
 @param scopeId
 @return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGet(ctx context.Context, realm string, clientUuid string, scopeId string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGetRequest {
	return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGetRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		clientUuid: clientUuid,
		scopeId: scopeId,
	}
}

// Execute executes the request
//  @return ScopeRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGetExecute(r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGetRequest) (*ScopeRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScopeRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope/{scope-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scope-id"+"}", url.PathEscape(parameterValueToString(r.scopeId, "scopeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	realm string
	clientUuid string
	scopeId string
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGetRequest) Execute() ([]PolicyRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param clientUuid id of client (not client-id!)
 @param scopeId
 @return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGet(ctx context.Context, realm string, clientUuid string, scopeId string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGetRequest {
	return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGetRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		clientUuid: clientUuid,
		scopeId: scopeId,
	}
}

// Execute executes the request
//  @return []PolicyRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGetExecute(r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGetRequest) ([]PolicyRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PolicyRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope/{scope-id}/permissions"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scope-id"+"}", url.PathEscape(parameterValueToString(r.scopeId, "scopeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPutRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	realm string
	clientUuid string
	scopeId string
	scopeRepresentation *ScopeRepresentation
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPutRequest) ScopeRepresentation(scopeRepresentation ScopeRepresentation) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPutRequest {
	r.scopeRepresentation = &scopeRepresentation
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPutExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPut Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param clientUuid id of client (not client-id!)
 @param scopeId
 @return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPutRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPut(ctx context.Context, realm string, clientUuid string, scopeId string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPutRequest {
	return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPutRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		clientUuid: clientUuid,
		scopeId: scopeId,
	}
}

// Execute executes the request
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPutExecute(r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope/{scope-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scope-id"+"}", url.PathEscape(parameterValueToString(r.scopeId, "scopeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.scopeRepresentation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	realm string
	clientUuid string
	scopeId string
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGetRequest) Execute() ([]ResourceRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param clientUuid id of client (not client-id!)
 @param scopeId
 @return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGet(ctx context.Context, realm string, clientUuid string, scopeId string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGetRequest {
	return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGetRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		clientUuid: clientUuid,
		scopeId: scopeId,
	}
}

// Execute executes the request
//  @return []ResourceRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGetExecute(r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGetRequest) ([]ResourceRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ResourceRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope/{scope-id}/resources"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scope-id"+"}", url.PathEscape(parameterValueToString(r.scopeId, "scopeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	realm string
	clientUuid string
	name *string
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGetRequest) Name(name string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGetRequest {
	r.name = &name
	return r
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGetRequest) Execute() ([]ScopeRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param clientUuid id of client (not client-id!)
 @return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGet(ctx context.Context, realm string, clientUuid string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGetRequest {
	return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGetRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
//  @return []ScopeRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGetExecute(r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGetRequest) ([]ScopeRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ScopeRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope/search"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	realm string
	clientUuid string
}

func (r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGetRequest) Execute() (*ResourceServerRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param realm realm name (not id!)
 @param clientUuid id of client (not client-id!)
 @return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGet(ctx context.Context, realm string, clientUuid string) ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGetRequest {
	return ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGetRequest{
		ApiService: a,
		ctx: ctx,
		realm: realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
//  @return ResourceServerRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGetExecute(r ApiAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGetRequest) (*ResourceServerRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResourceServerRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/settings"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
