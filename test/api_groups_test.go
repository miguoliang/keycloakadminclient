/*
Keycloak Admin REST API

Testing GroupsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package keycloakadminclient

import (
	"context"
	openapiclient "github.com/miguoliang/keycloakadminclient"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_keycloakadminclient_GroupsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test GroupsAPIService AdminRealmsRealmGroupsCountGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.GroupsAPI.AdminRealmsRealmGroupsCountGet(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService AdminRealmsRealmGroupsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.GroupsAPI.AdminRealmsRealmGroupsGet(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService AdminRealmsRealmGroupsGroupIdChildrenGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var groupId string

		resp, httpRes, err := apiClient.GroupsAPI.AdminRealmsRealmGroupsGroupIdChildrenGet(context.Background(), realm, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService AdminRealmsRealmGroupsGroupIdChildrenPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var groupId string

		httpRes, err := apiClient.GroupsAPI.AdminRealmsRealmGroupsGroupIdChildrenPost(context.Background(), realm, groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService AdminRealmsRealmGroupsGroupIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var groupId string

		httpRes, err := apiClient.GroupsAPI.AdminRealmsRealmGroupsGroupIdDelete(context.Background(), realm, groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService AdminRealmsRealmGroupsGroupIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var groupId string

		resp, httpRes, err := apiClient.GroupsAPI.AdminRealmsRealmGroupsGroupIdGet(context.Background(), realm, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService AdminRealmsRealmGroupsGroupIdManagementPermissionsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var groupId string

		resp, httpRes, err := apiClient.GroupsAPI.AdminRealmsRealmGroupsGroupIdManagementPermissionsGet(context.Background(), realm, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService AdminRealmsRealmGroupsGroupIdManagementPermissionsPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var groupId string

		resp, httpRes, err := apiClient.GroupsAPI.AdminRealmsRealmGroupsGroupIdManagementPermissionsPut(context.Background(), realm, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService AdminRealmsRealmGroupsGroupIdMembersGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var groupId string

		resp, httpRes, err := apiClient.GroupsAPI.AdminRealmsRealmGroupsGroupIdMembersGet(context.Background(), realm, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService AdminRealmsRealmGroupsGroupIdPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var groupId string

		httpRes, err := apiClient.GroupsAPI.AdminRealmsRealmGroupsGroupIdPut(context.Background(), realm, groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsAPIService AdminRealmsRealmGroupsPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		httpRes, err := apiClient.GroupsAPI.AdminRealmsRealmGroupsPost(context.Background(), realm).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
