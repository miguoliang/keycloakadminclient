/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keycloakadminclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ClientRoleMappingsAPIService ClientRoleMappingsAPI service
type ClientRoleMappingsAPIService service

type ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientAvailableGetRequest struct {
	ctx        context.Context
	ApiService *ClientRoleMappingsAPIService
	realm      string
	groupId    string
	client     string
}

func (r ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientAvailableGetRequest) Execute() ([]RoleRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientAvailableGetExecute(r)
}

/*
AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientAvailableGet Get available client-level roles that can be mapped to the user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param groupId
	@param client
	@return ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientAvailableGetRequest
*/
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientAvailableGet(ctx context.Context, realm string, groupId string, client string) ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientAvailableGetRequest {
	return ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientAvailableGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		groupId:    groupId,
		client:     client,
	}
}

// Execute executes the request
//
//	@return []RoleRepresentation
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientAvailableGetExecute(r ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientAvailableGetRequest) ([]RoleRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []RoleRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientRoleMappingsAPIService.AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientAvailableGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client}/available"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client"+"}", url.PathEscape(parameterValueToString(r.client, "client")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientCompositeGetRequest struct {
	ctx                 context.Context
	ApiService          *ClientRoleMappingsAPIService
	realm               string
	groupId             string
	client              string
	briefRepresentation *bool
}

// if false, return roles with their attributes
func (r ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientCompositeGetRequest) BriefRepresentation(briefRepresentation bool) ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientCompositeGetRequest {
	r.briefRepresentation = &briefRepresentation
	return r
}

func (r ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientCompositeGetRequest) Execute() ([]RoleRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientCompositeGetExecute(r)
}

/*
AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientCompositeGet Get effective client-level role mappings This recurses any composite roles

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param groupId
	@param client
	@return ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientCompositeGetRequest
*/
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientCompositeGet(ctx context.Context, realm string, groupId string, client string) ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientCompositeGetRequest {
	return ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientCompositeGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		groupId:    groupId,
		client:     client,
	}
}

// Execute executes the request
//
//	@return []RoleRepresentation
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientCompositeGetExecute(r ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientCompositeGetRequest) ([]RoleRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []RoleRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientRoleMappingsAPIService.AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientCompositeGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client}/composite"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client"+"}", url.PathEscape(parameterValueToString(r.client, "client")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.briefRepresentation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "briefRepresentation", r.briefRepresentation, "")
	} else {
		var defaultValue bool = true
		r.briefRepresentation = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientDeleteRequest struct {
	ctx                context.Context
	ApiService         *ClientRoleMappingsAPIService
	realm              string
	groupId            string
	client             string
	roleRepresentation *[]RoleRepresentation
}

func (r ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientDeleteRequest) RoleRepresentation(roleRepresentation []RoleRepresentation) ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientDeleteRequest {
	r.roleRepresentation = &roleRepresentation
	return r
}

func (r ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientDeleteExecute(r)
}

/*
AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientDelete Delete client-level roles from user role mapping

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param groupId
	@param client
	@return ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientDeleteRequest
*/
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientDelete(ctx context.Context, realm string, groupId string, client string) ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientDeleteRequest {
	return ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		groupId:    groupId,
		client:     client,
	}
}

// Execute executes the request
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientDeleteExecute(r ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientRoleMappingsAPIService.AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client"+"}", url.PathEscape(parameterValueToString(r.client, "client")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.roleRepresentation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientGetRequest struct {
	ctx        context.Context
	ApiService *ClientRoleMappingsAPIService
	realm      string
	groupId    string
	client     string
}

func (r ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientGetRequest) Execute() ([]RoleRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientGetExecute(r)
}

/*
AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientGet Get client-level role mappings for the user, and the app

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param groupId
	@param client
	@return ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientGetRequest
*/
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientGet(ctx context.Context, realm string, groupId string, client string) ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientGetRequest {
	return ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		groupId:    groupId,
		client:     client,
	}
}

// Execute executes the request
//
//	@return []RoleRepresentation
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientGetExecute(r ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientGetRequest) ([]RoleRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []RoleRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientRoleMappingsAPIService.AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client"+"}", url.PathEscape(parameterValueToString(r.client, "client")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientPostRequest struct {
	ctx                context.Context
	ApiService         *ClientRoleMappingsAPIService
	realm              string
	groupId            string
	client             string
	roleRepresentation *[]RoleRepresentation
}

func (r ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientPostRequest) RoleRepresentation(roleRepresentation []RoleRepresentation) ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientPostRequest {
	r.roleRepresentation = &roleRepresentation
	return r
}

func (r ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientPostExecute(r)
}

/*
AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientPost Add client-level roles to the user role mapping

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param groupId
	@param client
	@return ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientPostRequest
*/
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientPost(ctx context.Context, realm string, groupId string, client string) ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientPostRequest {
	return ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientPostRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		groupId:    groupId,
		client:     client,
	}
}

// Execute executes the request
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientPostExecute(r ClientRoleMappingsAPIAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientRoleMappingsAPIService.AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client"+"}", url.PathEscape(parameterValueToString(r.client, "client")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.roleRepresentation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientAvailableGetRequest struct {
	ctx        context.Context
	ApiService *ClientRoleMappingsAPIService
	realm      string
	userId     string
	client     string
}

func (r ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientAvailableGetRequest) Execute() ([]RoleRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmUsersUserIdRoleMappingsClientsClientAvailableGetExecute(r)
}

/*
AdminRealmsRealmUsersUserIdRoleMappingsClientsClientAvailableGet Get available client-level roles that can be mapped to the user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param userId
	@param client
	@return ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientAvailableGetRequest
*/
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmUsersUserIdRoleMappingsClientsClientAvailableGet(ctx context.Context, realm string, userId string, client string) ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientAvailableGetRequest {
	return ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientAvailableGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		userId:     userId,
		client:     client,
	}
}

// Execute executes the request
//
//	@return []RoleRepresentation
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmUsersUserIdRoleMappingsClientsClientAvailableGetExecute(r ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientAvailableGetRequest) ([]RoleRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []RoleRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientRoleMappingsAPIService.AdminRealmsRealmUsersUserIdRoleMappingsClientsClientAvailableGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client}/available"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client"+"}", url.PathEscape(parameterValueToString(r.client, "client")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientCompositeGetRequest struct {
	ctx                 context.Context
	ApiService          *ClientRoleMappingsAPIService
	realm               string
	userId              string
	client              string
	briefRepresentation *bool
}

// if false, return roles with their attributes
func (r ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientCompositeGetRequest) BriefRepresentation(briefRepresentation bool) ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientCompositeGetRequest {
	r.briefRepresentation = &briefRepresentation
	return r
}

func (r ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientCompositeGetRequest) Execute() ([]RoleRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmUsersUserIdRoleMappingsClientsClientCompositeGetExecute(r)
}

/*
AdminRealmsRealmUsersUserIdRoleMappingsClientsClientCompositeGet Get effective client-level role mappings This recurses any composite roles

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param userId
	@param client
	@return ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientCompositeGetRequest
*/
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmUsersUserIdRoleMappingsClientsClientCompositeGet(ctx context.Context, realm string, userId string, client string) ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientCompositeGetRequest {
	return ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientCompositeGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		userId:     userId,
		client:     client,
	}
}

// Execute executes the request
//
//	@return []RoleRepresentation
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmUsersUserIdRoleMappingsClientsClientCompositeGetExecute(r ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientCompositeGetRequest) ([]RoleRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []RoleRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientRoleMappingsAPIService.AdminRealmsRealmUsersUserIdRoleMappingsClientsClientCompositeGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client}/composite"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client"+"}", url.PathEscape(parameterValueToString(r.client, "client")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.briefRepresentation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "briefRepresentation", r.briefRepresentation, "")
	} else {
		var defaultValue bool = true
		r.briefRepresentation = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientDeleteRequest struct {
	ctx                context.Context
	ApiService         *ClientRoleMappingsAPIService
	realm              string
	userId             string
	client             string
	roleRepresentation *[]RoleRepresentation
}

func (r ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientDeleteRequest) RoleRepresentation(roleRepresentation []RoleRepresentation) ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientDeleteRequest {
	r.roleRepresentation = &roleRepresentation
	return r
}

func (r ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmUsersUserIdRoleMappingsClientsClientDeleteExecute(r)
}

/*
AdminRealmsRealmUsersUserIdRoleMappingsClientsClientDelete Delete client-level roles from user role mapping

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param userId
	@param client
	@return ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientDeleteRequest
*/
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmUsersUserIdRoleMappingsClientsClientDelete(ctx context.Context, realm string, userId string, client string) ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientDeleteRequest {
	return ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		userId:     userId,
		client:     client,
	}
}

// Execute executes the request
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmUsersUserIdRoleMappingsClientsClientDeleteExecute(r ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientRoleMappingsAPIService.AdminRealmsRealmUsersUserIdRoleMappingsClientsClientDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client"+"}", url.PathEscape(parameterValueToString(r.client, "client")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.roleRepresentation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientGetRequest struct {
	ctx        context.Context
	ApiService *ClientRoleMappingsAPIService
	realm      string
	userId     string
	client     string
}

func (r ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientGetRequest) Execute() ([]RoleRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmUsersUserIdRoleMappingsClientsClientGetExecute(r)
}

/*
AdminRealmsRealmUsersUserIdRoleMappingsClientsClientGet Get client-level role mappings for the user, and the app

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param userId
	@param client
	@return ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientGetRequest
*/
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmUsersUserIdRoleMappingsClientsClientGet(ctx context.Context, realm string, userId string, client string) ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientGetRequest {
	return ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		userId:     userId,
		client:     client,
	}
}

// Execute executes the request
//
//	@return []RoleRepresentation
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmUsersUserIdRoleMappingsClientsClientGetExecute(r ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientGetRequest) ([]RoleRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []RoleRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientRoleMappingsAPIService.AdminRealmsRealmUsersUserIdRoleMappingsClientsClientGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client"+"}", url.PathEscape(parameterValueToString(r.client, "client")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientPostRequest struct {
	ctx                context.Context
	ApiService         *ClientRoleMappingsAPIService
	realm              string
	userId             string
	client             string
	roleRepresentation *[]RoleRepresentation
}

func (r ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientPostRequest) RoleRepresentation(roleRepresentation []RoleRepresentation) ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientPostRequest {
	r.roleRepresentation = &roleRepresentation
	return r
}

func (r ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmUsersUserIdRoleMappingsClientsClientPostExecute(r)
}

/*
AdminRealmsRealmUsersUserIdRoleMappingsClientsClientPost Add client-level roles to the user role mapping

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param userId
	@param client
	@return ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientPostRequest
*/
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmUsersUserIdRoleMappingsClientsClientPost(ctx context.Context, realm string, userId string, client string) ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientPostRequest {
	return ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientPostRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		userId:     userId,
		client:     client,
	}
}

// Execute executes the request
func (a *ClientRoleMappingsAPIService) AdminRealmsRealmUsersUserIdRoleMappingsClientsClientPostExecute(r ClientRoleMappingsAPIAdminRealmsRealmUsersUserIdRoleMappingsClientsClientPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientRoleMappingsAPIService.AdminRealmsRealmUsersUserIdRoleMappingsClientsClientPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client"+"}", url.PathEscape(parameterValueToString(r.client, "client")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.roleRepresentation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
