/*
Keycloak Admin REST API

Testing ClientRoleMappingsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package keycloakadminclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/miguoliang/keycloakadminclient"
)

func Test_keycloakadminclient_ClientRoleMappingsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ClientRoleMappingsAPIService AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientAvailableGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var groupId string
		var client string

		resp, httpRes, err := apiClient.ClientRoleMappingsAPI.AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientAvailableGet(context.Background(), realm, groupId, client).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientRoleMappingsAPIService AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientCompositeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var groupId string
		var client string

		resp, httpRes, err := apiClient.ClientRoleMappingsAPI.AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientCompositeGet(context.Background(), realm, groupId, client).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientRoleMappingsAPIService AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var groupId string
		var client string

		httpRes, err := apiClient.ClientRoleMappingsAPI.AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientDelete(context.Background(), realm, groupId, client).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientRoleMappingsAPIService AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var groupId string
		var client string

		resp, httpRes, err := apiClient.ClientRoleMappingsAPI.AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientGet(context.Background(), realm, groupId, client).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientRoleMappingsAPIService AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var groupId string
		var client string

		httpRes, err := apiClient.ClientRoleMappingsAPI.AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientPost(context.Background(), realm, groupId, client).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientRoleMappingsAPIService AdminRealmsRealmUsersUserIdRoleMappingsClientsClientAvailableGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string
		var client string

		resp, httpRes, err := apiClient.ClientRoleMappingsAPI.AdminRealmsRealmUsersUserIdRoleMappingsClientsClientAvailableGet(context.Background(), realm, userId, client).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientRoleMappingsAPIService AdminRealmsRealmUsersUserIdRoleMappingsClientsClientCompositeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string
		var client string

		resp, httpRes, err := apiClient.ClientRoleMappingsAPI.AdminRealmsRealmUsersUserIdRoleMappingsClientsClientCompositeGet(context.Background(), realm, userId, client).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientRoleMappingsAPIService AdminRealmsRealmUsersUserIdRoleMappingsClientsClientDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string
		var client string

		httpRes, err := apiClient.ClientRoleMappingsAPI.AdminRealmsRealmUsersUserIdRoleMappingsClientsClientDelete(context.Background(), realm, userId, client).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientRoleMappingsAPIService AdminRealmsRealmUsersUserIdRoleMappingsClientsClientGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string
		var client string

		resp, httpRes, err := apiClient.ClientRoleMappingsAPI.AdminRealmsRealmUsersUserIdRoleMappingsClientsClientGet(context.Background(), realm, userId, client).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientRoleMappingsAPIService AdminRealmsRealmUsersUserIdRoleMappingsClientsClientPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string
		var client string

		httpRes, err := apiClient.ClientRoleMappingsAPI.AdminRealmsRealmUsersUserIdRoleMappingsClientsClientPost(context.Background(), realm, userId, client).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
