/*
Keycloak Admin REST API

Testing RoleMapperAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package main

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/miguoliang/keycloakadminclient"
)

func Test_main_RoleMapperAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RoleMapperAPIService AdminRealmsRealmGroupsGroupIdRoleMappingsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var groupId string

		resp, httpRes, err := apiClient.RoleMapperAPI.AdminRealmsRealmGroupsGroupIdRoleMappingsGet(context.Background(), realm, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleMapperAPIService AdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var groupId string

		resp, httpRes, err := apiClient.RoleMapperAPI.AdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableGet(context.Background(), realm, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleMapperAPIService AdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var groupId string

		resp, httpRes, err := apiClient.RoleMapperAPI.AdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeGet(context.Background(), realm, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleMapperAPIService AdminRealmsRealmGroupsGroupIdRoleMappingsRealmDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var groupId string

		httpRes, err := apiClient.RoleMapperAPI.AdminRealmsRealmGroupsGroupIdRoleMappingsRealmDelete(context.Background(), realm, groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleMapperAPIService AdminRealmsRealmGroupsGroupIdRoleMappingsRealmGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var groupId string

		resp, httpRes, err := apiClient.RoleMapperAPI.AdminRealmsRealmGroupsGroupIdRoleMappingsRealmGet(context.Background(), realm, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleMapperAPIService AdminRealmsRealmGroupsGroupIdRoleMappingsRealmPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var groupId string

		httpRes, err := apiClient.RoleMapperAPI.AdminRealmsRealmGroupsGroupIdRoleMappingsRealmPost(context.Background(), realm, groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleMapperAPIService AdminRealmsRealmUsersUserIdRoleMappingsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string

		resp, httpRes, err := apiClient.RoleMapperAPI.AdminRealmsRealmUsersUserIdRoleMappingsGet(context.Background(), realm, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleMapperAPIService AdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string

		resp, httpRes, err := apiClient.RoleMapperAPI.AdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableGet(context.Background(), realm, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleMapperAPIService AdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string

		resp, httpRes, err := apiClient.RoleMapperAPI.AdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeGet(context.Background(), realm, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleMapperAPIService AdminRealmsRealmUsersUserIdRoleMappingsRealmDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string

		httpRes, err := apiClient.RoleMapperAPI.AdminRealmsRealmUsersUserIdRoleMappingsRealmDelete(context.Background(), realm, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleMapperAPIService AdminRealmsRealmUsersUserIdRoleMappingsRealmGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string

		resp, httpRes, err := apiClient.RoleMapperAPI.AdminRealmsRealmUsersUserIdRoleMappingsRealmGet(context.Background(), realm, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoleMapperAPIService AdminRealmsRealmUsersUserIdRoleMappingsRealmPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var userId string

		httpRes, err := apiClient.RoleMapperAPI.AdminRealmsRealmUsersUserIdRoleMappingsRealmPost(context.Background(), realm, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
