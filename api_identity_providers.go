/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keycloakadminclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// IdentityProvidersAPIService IdentityProvidersAPI service
type IdentityProvidersAPIService service

type IdentityProvidersAPIAdminRealmsRealmIdentityProviderImportConfigPostRequest struct {
	ctx         context.Context
	ApiService  *IdentityProvidersAPIService
	realm       string
	requestBody *map[string]interface{}
}

func (r IdentityProvidersAPIAdminRealmsRealmIdentityProviderImportConfigPostRequest) RequestBody(requestBody map[string]interface{}) IdentityProvidersAPIAdminRealmsRealmIdentityProviderImportConfigPostRequest {
	r.requestBody = &requestBody
	return r
}

func (r IdentityProvidersAPIAdminRealmsRealmIdentityProviderImportConfigPostRequest) Execute() (map[string]string, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmIdentityProviderImportConfigPostExecute(r)
}

/*
AdminRealmsRealmIdentityProviderImportConfigPost Import identity provider from JSON body

Import identity provider from uploaded JSON file

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@return IdentityProvidersAPIAdminRealmsRealmIdentityProviderImportConfigPostRequest
*/
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderImportConfigPost(ctx context.Context, realm string) IdentityProvidersAPIAdminRealmsRealmIdentityProviderImportConfigPostRequest {
	return IdentityProvidersAPIAdminRealmsRealmIdentityProviderImportConfigPostRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
	}
}

// Execute executes the request
//
//	@return map[string]string
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderImportConfigPostExecute(r IdentityProvidersAPIAdminRealmsRealmIdentityProviderImportConfigPostRequest) (map[string]string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.AdminRealmsRealmIdentityProviderImportConfigPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/identity-provider/import-config"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasDeleteRequest struct {
	ctx        context.Context
	ApiService *IdentityProvidersAPIService
	realm      string
	alias      string
}

func (r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmIdentityProviderInstancesAliasDeleteExecute(r)
}

/*
AdminRealmsRealmIdentityProviderInstancesAliasDelete Delete the identity provider

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param alias
	@return IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasDeleteRequest
*/
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderInstancesAliasDelete(ctx context.Context, realm string, alias string) IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasDeleteRequest {
	return IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		alias:      alias,
	}
}

// Execute executes the request
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderInstancesAliasDeleteExecute(r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.AdminRealmsRealmIdentityProviderInstancesAliasDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/identity-provider/instances/{alias}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"alias"+"}", url.PathEscape(parameterValueToString(r.alias, "alias")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasExportGetRequest struct {
	ctx        context.Context
	ApiService *IdentityProvidersAPIService
	realm      string
	alias      string
	format     *string
}

// Format to use
func (r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasExportGetRequest) Format(format string) IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasExportGetRequest {
	r.format = &format
	return r
}

func (r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasExportGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmIdentityProviderInstancesAliasExportGetExecute(r)
}

/*
AdminRealmsRealmIdentityProviderInstancesAliasExportGet Export public broker configuration for identity provider

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param alias
	@return IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasExportGetRequest
*/
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderInstancesAliasExportGet(ctx context.Context, realm string, alias string) IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasExportGetRequest {
	return IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasExportGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		alias:      alias,
	}
}

// Execute executes the request
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderInstancesAliasExportGetExecute(r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasExportGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.AdminRealmsRealmIdentityProviderInstancesAliasExportGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/identity-provider/instances/{alias}/export"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"alias"+"}", url.PathEscape(parameterValueToString(r.alias, "alias")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasGetRequest struct {
	ctx        context.Context
	ApiService *IdentityProvidersAPIService
	realm      string
	alias      string
}

func (r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasGetRequest) Execute() (*IdentityProviderRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmIdentityProviderInstancesAliasGetExecute(r)
}

/*
AdminRealmsRealmIdentityProviderInstancesAliasGet Get the identity provider

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param alias
	@return IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasGetRequest
*/
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderInstancesAliasGet(ctx context.Context, realm string, alias string) IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasGetRequest {
	return IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		alias:      alias,
	}
}

// Execute executes the request
//
//	@return IdentityProviderRepresentation
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderInstancesAliasGetExecute(r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasGetRequest) (*IdentityProviderRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *IdentityProviderRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.AdminRealmsRealmIdentityProviderInstancesAliasGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/identity-provider/instances/{alias}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"alias"+"}", url.PathEscape(parameterValueToString(r.alias, "alias")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetRequest struct {
	ctx        context.Context
	ApiService *IdentityProvidersAPIService
	realm      string
	alias      string
}

func (r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetRequest) Execute() (*ManagementPermissionReference, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetExecute(r)
}

/*
AdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGet Return object stating whether client Authorization permissions have been initialized or not and a reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param alias
	@return IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetRequest
*/
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGet(ctx context.Context, realm string, alias string) IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetRequest {
	return IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		alias:      alias,
	}
}

// Execute executes the request
//
//	@return ManagementPermissionReference
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetExecute(r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetRequest) (*ManagementPermissionReference, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ManagementPermissionReference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.AdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/identity-provider/instances/{alias}/management/permissions"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"alias"+"}", url.PathEscape(parameterValueToString(r.alias, "alias")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutRequest struct {
	ctx                           context.Context
	ApiService                    *IdentityProvidersAPIService
	realm                         string
	alias                         string
	managementPermissionReference *ManagementPermissionReference
}

func (r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutRequest) ManagementPermissionReference(managementPermissionReference ManagementPermissionReference) IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutRequest {
	r.managementPermissionReference = &managementPermissionReference
	return r
}

func (r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutRequest) Execute() (*ManagementPermissionReference, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutExecute(r)
}

/*
AdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPut Return object stating whether client Authorization permissions have been initialized or not and a reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param alias
	@return IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutRequest
*/
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPut(ctx context.Context, realm string, alias string) IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutRequest {
	return IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		alias:      alias,
	}
}

// Execute executes the request
//
//	@return ManagementPermissionReference
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutExecute(r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutRequest) (*ManagementPermissionReference, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ManagementPermissionReference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.AdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/identity-provider/instances/{alias}/management/permissions"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"alias"+"}", url.PathEscape(parameterValueToString(r.alias, "alias")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.managementPermissionReference
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetRequest struct {
	ctx        context.Context
	ApiService *IdentityProvidersAPIService
	realm      string
	alias      string
}

func (r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetRequest) Execute() (*map[string]IdentityProviderMapperTypeRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetExecute(r)
}

/*
AdminRealmsRealmIdentityProviderInstancesAliasMapperTypesGet Get mapper types for identity provider

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param alias
	@return IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetRequest
*/
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderInstancesAliasMapperTypesGet(ctx context.Context, realm string, alias string) IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetRequest {
	return IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		alias:      alias,
	}
}

// Execute executes the request
//
//	@return map[string]IdentityProviderMapperTypeRepresentation
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetExecute(r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetRequest) (*map[string]IdentityProviderMapperTypeRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *map[string]IdentityProviderMapperTypeRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.AdminRealmsRealmIdentityProviderInstancesAliasMapperTypesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/identity-provider/instances/{alias}/mapper-types"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"alias"+"}", url.PathEscape(parameterValueToString(r.alias, "alias")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersGetRequest struct {
	ctx        context.Context
	ApiService *IdentityProvidersAPIService
	realm      string
	alias      string
}

func (r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersGetRequest) Execute() ([]IdentityProviderMapperRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmIdentityProviderInstancesAliasMappersGetExecute(r)
}

/*
AdminRealmsRealmIdentityProviderInstancesAliasMappersGet Get mappers for identity provider

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param alias
	@return IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersGetRequest
*/
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderInstancesAliasMappersGet(ctx context.Context, realm string, alias string) IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersGetRequest {
	return IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		alias:      alias,
	}
}

// Execute executes the request
//
//	@return []IdentityProviderMapperRepresentation
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderInstancesAliasMappersGetExecute(r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersGetRequest) ([]IdentityProviderMapperRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []IdentityProviderMapperRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.AdminRealmsRealmIdentityProviderInstancesAliasMappersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/identity-provider/instances/{alias}/mappers"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"alias"+"}", url.PathEscape(parameterValueToString(r.alias, "alias")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteRequest struct {
	ctx        context.Context
	ApiService *IdentityProvidersAPIService
	realm      string
	alias      string
	id         string
}

func (r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteExecute(r)
}

/*
AdminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete Delete a mapper for the identity provider

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param alias
	@param id Mapper id
	@return IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteRequest
*/
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete(ctx context.Context, realm string, alias string, id string) IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteRequest {
	return IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		alias:      alias,
		id:         id,
	}
}

// Execute executes the request
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteExecute(r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.AdminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/identity-provider/instances/{alias}/mappers/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"alias"+"}", url.PathEscape(parameterValueToString(r.alias, "alias")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersIdGetRequest struct {
	ctx        context.Context
	ApiService *IdentityProvidersAPIService
	realm      string
	alias      string
	id         string
}

func (r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersIdGetRequest) Execute() (*IdentityProviderMapperRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmIdentityProviderInstancesAliasMappersIdGetExecute(r)
}

/*
AdminRealmsRealmIdentityProviderInstancesAliasMappersIdGet Get mapper by id for the identity provider

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param alias
	@param id
	@return IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersIdGetRequest
*/
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderInstancesAliasMappersIdGet(ctx context.Context, realm string, alias string, id string) IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersIdGetRequest {
	return IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		alias:      alias,
		id:         id,
	}
}

// Execute executes the request
//
//	@return IdentityProviderMapperRepresentation
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderInstancesAliasMappersIdGetExecute(r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersIdGetRequest) (*IdentityProviderMapperRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *IdentityProviderMapperRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.AdminRealmsRealmIdentityProviderInstancesAliasMappersIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/identity-provider/instances/{alias}/mappers/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"alias"+"}", url.PathEscape(parameterValueToString(r.alias, "alias")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersIdPutRequest struct {
	ctx                                  context.Context
	ApiService                           *IdentityProvidersAPIService
	realm                                string
	alias                                string
	id                                   string
	identityProviderMapperRepresentation *IdentityProviderMapperRepresentation
}

func (r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersIdPutRequest) IdentityProviderMapperRepresentation(identityProviderMapperRepresentation IdentityProviderMapperRepresentation) IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersIdPutRequest {
	r.identityProviderMapperRepresentation = &identityProviderMapperRepresentation
	return r
}

func (r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersIdPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmIdentityProviderInstancesAliasMappersIdPutExecute(r)
}

/*
AdminRealmsRealmIdentityProviderInstancesAliasMappersIdPut Update a mapper for the identity provider

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param alias
	@param id Mapper id
	@return IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersIdPutRequest
*/
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderInstancesAliasMappersIdPut(ctx context.Context, realm string, alias string, id string) IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersIdPutRequest {
	return IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersIdPutRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		alias:      alias,
		id:         id,
	}
}

// Execute executes the request
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderInstancesAliasMappersIdPutExecute(r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersIdPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.AdminRealmsRealmIdentityProviderInstancesAliasMappersIdPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/identity-provider/instances/{alias}/mappers/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"alias"+"}", url.PathEscape(parameterValueToString(r.alias, "alias")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.identityProviderMapperRepresentation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersPostRequest struct {
	ctx                                  context.Context
	ApiService                           *IdentityProvidersAPIService
	realm                                string
	alias                                string
	identityProviderMapperRepresentation *IdentityProviderMapperRepresentation
}

func (r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersPostRequest) IdentityProviderMapperRepresentation(identityProviderMapperRepresentation IdentityProviderMapperRepresentation) IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersPostRequest {
	r.identityProviderMapperRepresentation = &identityProviderMapperRepresentation
	return r
}

func (r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmIdentityProviderInstancesAliasMappersPostExecute(r)
}

/*
AdminRealmsRealmIdentityProviderInstancesAliasMappersPost Add a mapper to identity provider

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param alias
	@return IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersPostRequest
*/
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderInstancesAliasMappersPost(ctx context.Context, realm string, alias string) IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersPostRequest {
	return IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersPostRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		alias:      alias,
	}
}

// Execute executes the request
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderInstancesAliasMappersPostExecute(r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasMappersPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.AdminRealmsRealmIdentityProviderInstancesAliasMappersPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/identity-provider/instances/{alias}/mappers"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"alias"+"}", url.PathEscape(parameterValueToString(r.alias, "alias")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.identityProviderMapperRepresentation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasPutRequest struct {
	ctx                            context.Context
	ApiService                     *IdentityProvidersAPIService
	realm                          string
	alias                          string
	identityProviderRepresentation *IdentityProviderRepresentation
}

func (r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasPutRequest) IdentityProviderRepresentation(identityProviderRepresentation IdentityProviderRepresentation) IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasPutRequest {
	r.identityProviderRepresentation = &identityProviderRepresentation
	return r
}

func (r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmIdentityProviderInstancesAliasPutExecute(r)
}

/*
AdminRealmsRealmIdentityProviderInstancesAliasPut Update the identity provider

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param alias
	@return IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasPutRequest
*/
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderInstancesAliasPut(ctx context.Context, realm string, alias string) IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasPutRequest {
	return IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasPutRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		alias:      alias,
	}
}

// Execute executes the request
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderInstancesAliasPutExecute(r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.AdminRealmsRealmIdentityProviderInstancesAliasPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/identity-provider/instances/{alias}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"alias"+"}", url.PathEscape(parameterValueToString(r.alias, "alias")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.identityProviderRepresentation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetRequest struct {
	ctx        context.Context
	ApiService *IdentityProvidersAPIService
	realm      string
	alias      string
}

func (r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetRequest) Execute() (bool, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetExecute(r)
}

/*
AdminRealmsRealmIdentityProviderInstancesAliasReloadKeysGet Reaload keys for the identity provider if the provider supports it, \"true\" is returned if reload was performed, \"false\" if not.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param alias
	@return IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetRequest
*/
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderInstancesAliasReloadKeysGet(ctx context.Context, realm string, alias string) IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetRequest {
	return IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		alias:      alias,
	}
}

// Execute executes the request
//
//	@return bool
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetExecute(r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetRequest) (bool, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue bool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.AdminRealmsRealmIdentityProviderInstancesAliasReloadKeysGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/identity-provider/instances/{alias}/reload-keys"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"alias"+"}", url.PathEscape(parameterValueToString(r.alias, "alias")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesGetRequest struct {
	ctx                 context.Context
	ApiService          *IdentityProvidersAPIService
	realm               string
	briefRepresentation *bool
	first               *int32
	max                 *int32
	search              *string
}

// Boolean which defines whether brief representations are returned (default: false)
func (r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesGetRequest) BriefRepresentation(briefRepresentation bool) IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesGetRequest {
	r.briefRepresentation = &briefRepresentation
	return r
}

// Pagination offset
func (r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesGetRequest) First(first int32) IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesGetRequest {
	r.first = &first
	return r
}

// Maximum results size (defaults to 100)
func (r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesGetRequest) Max(max int32) IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesGetRequest {
	r.max = &max
	return r
}

// Filter specific providers by name. Search can be prefix (name*), contains (*name*) or exact (\&quot;name\&quot;). Default prefixed.
func (r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesGetRequest) Search(search string) IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesGetRequest {
	r.search = &search
	return r
}

func (r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesGetRequest) Execute() ([]IdentityProviderRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmIdentityProviderInstancesGetExecute(r)
}

/*
AdminRealmsRealmIdentityProviderInstancesGet List identity providers

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@return IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesGetRequest
*/
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderInstancesGet(ctx context.Context, realm string) IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesGetRequest {
	return IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
	}
}

// Execute executes the request
//
//	@return []IdentityProviderRepresentation
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderInstancesGetExecute(r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesGetRequest) ([]IdentityProviderRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []IdentityProviderRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.AdminRealmsRealmIdentityProviderInstancesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/identity-provider/instances"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.briefRepresentation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "briefRepresentation", r.briefRepresentation, "")
	}
	if r.first != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "first", r.first, "")
	}
	if r.max != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesPostRequest struct {
	ctx                            context.Context
	ApiService                     *IdentityProvidersAPIService
	realm                          string
	identityProviderRepresentation *IdentityProviderRepresentation
}

func (r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesPostRequest) IdentityProviderRepresentation(identityProviderRepresentation IdentityProviderRepresentation) IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesPostRequest {
	r.identityProviderRepresentation = &identityProviderRepresentation
	return r
}

func (r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmIdentityProviderInstancesPostExecute(r)
}

/*
AdminRealmsRealmIdentityProviderInstancesPost Create a new identity provider

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@return IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesPostRequest
*/
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderInstancesPost(ctx context.Context, realm string) IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesPostRequest {
	return IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesPostRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
	}
}

// Execute executes the request
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderInstancesPostExecute(r IdentityProvidersAPIAdminRealmsRealmIdentityProviderInstancesPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.AdminRealmsRealmIdentityProviderInstancesPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/identity-provider/instances"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.identityProviderRepresentation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type IdentityProvidersAPIAdminRealmsRealmIdentityProviderProvidersProviderIdGetRequest struct {
	ctx        context.Context
	ApiService *IdentityProvidersAPIService
	realm      string
	providerId string
}

func (r IdentityProvidersAPIAdminRealmsRealmIdentityProviderProvidersProviderIdGetRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmIdentityProviderProvidersProviderIdGetExecute(r)
}

/*
AdminRealmsRealmIdentityProviderProvidersProviderIdGet Get the identity provider factory for that provider id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param providerId The provider id to get the factory
	@return IdentityProvidersAPIAdminRealmsRealmIdentityProviderProvidersProviderIdGetRequest
*/
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderProvidersProviderIdGet(ctx context.Context, realm string, providerId string) IdentityProvidersAPIAdminRealmsRealmIdentityProviderProvidersProviderIdGetRequest {
	return IdentityProvidersAPIAdminRealmsRealmIdentityProviderProvidersProviderIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		providerId: providerId,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *IdentityProvidersAPIService) AdminRealmsRealmIdentityProviderProvidersProviderIdGetExecute(r IdentityProvidersAPIAdminRealmsRealmIdentityProviderProvidersProviderIdGetRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.AdminRealmsRealmIdentityProviderProvidersProviderIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/identity-provider/providers/{provider_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"provider_id"+"}", url.PathEscape(parameterValueToString(r.providerId, "providerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
