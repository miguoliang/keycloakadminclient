/*
Keycloak Admin REST API

Testing DefaultAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package keycloakadminclient

import (
	"context"
	openapiclient "github.com/miguoliang/keycloakadminclient"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_keycloakadminclient_DefaultAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultAPIService AdminRealmsRealmClientsClientUuidAuthzResourceServerGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientUuid string

		resp, httpRes, err := apiClient.DefaultAPI.AdminRealmsRealmClientsClientUuidAuthzResourceServerGet(context.Background(), realm, clientUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AdminRealmsRealmClientsClientUuidAuthzResourceServerImportPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientUuid string

		httpRes, err := apiClient.DefaultAPI.AdminRealmsRealmClientsClientUuidAuthzResourceServerImportPost(context.Background(), realm, clientUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientUuid string

		resp, httpRes, err := apiClient.DefaultAPI.AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePost(context.Background(), realm, clientUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientUuid string

		resp, httpRes, err := apiClient.DefaultAPI.AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGet(context.Background(), realm, clientUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientUuid string

		httpRes, err := apiClient.DefaultAPI.AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPost(context.Background(), realm, clientUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientUuid string

		resp, httpRes, err := apiClient.DefaultAPI.AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGet(context.Background(), realm, clientUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientUuid string

		resp, httpRes, err := apiClient.DefaultAPI.AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGet(context.Background(), realm, clientUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientUuid string

		resp, httpRes, err := apiClient.DefaultAPI.AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePost(context.Background(), realm, clientUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientUuid string

		resp, httpRes, err := apiClient.DefaultAPI.AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGet(context.Background(), realm, clientUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientUuid string

		httpRes, err := apiClient.DefaultAPI.AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPost(context.Background(), realm, clientUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientUuid string

		resp, httpRes, err := apiClient.DefaultAPI.AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGet(context.Background(), realm, clientUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientUuid string

		resp, httpRes, err := apiClient.DefaultAPI.AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGet(context.Background(), realm, clientUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AdminRealmsRealmClientsClientUuidAuthzResourceServerPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientUuid string

		httpRes, err := apiClient.DefaultAPI.AdminRealmsRealmClientsClientUuidAuthzResourceServerPut(context.Background(), realm, clientUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientUuid string

		resp, httpRes, err := apiClient.DefaultAPI.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGet(context.Background(), realm, clientUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientUuid string

		resp, httpRes, err := apiClient.DefaultAPI.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePost(context.Background(), realm, clientUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientUuid string
		var resourceId string

		httpRes, err := apiClient.DefaultAPI.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGet(context.Background(), realm, clientUuid, resourceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientUuid string
		var resourceId string

		httpRes, err := apiClient.DefaultAPI.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDelete(context.Background(), realm, clientUuid, resourceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientUuid string
		var resourceId string

		resp, httpRes, err := apiClient.DefaultAPI.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGet(context.Background(), realm, clientUuid, resourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientUuid string
		var resourceId string

		resp, httpRes, err := apiClient.DefaultAPI.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGet(context.Background(), realm, clientUuid, resourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientUuid string
		var resourceId string

		httpRes, err := apiClient.DefaultAPI.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPut(context.Background(), realm, clientUuid, resourceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientUuid string
		var resourceId string

		resp, httpRes, err := apiClient.DefaultAPI.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGet(context.Background(), realm, clientUuid, resourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientUuid string

		resp, httpRes, err := apiClient.DefaultAPI.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGet(context.Background(), realm, clientUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientUuid string

		resp, httpRes, err := apiClient.DefaultAPI.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGet(context.Background(), realm, clientUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AdminRealmsRealmClientsClientUuidAuthzResourceServerScopePost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientUuid string

		httpRes, err := apiClient.DefaultAPI.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopePost(context.Background(), realm, clientUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientUuid string
		var scopeId string

		httpRes, err := apiClient.DefaultAPI.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDelete(context.Background(), realm, clientUuid, scopeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientUuid string
		var scopeId string

		resp, httpRes, err := apiClient.DefaultAPI.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGet(context.Background(), realm, clientUuid, scopeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientUuid string
		var scopeId string

		resp, httpRes, err := apiClient.DefaultAPI.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGet(context.Background(), realm, clientUuid, scopeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientUuid string
		var scopeId string

		httpRes, err := apiClient.DefaultAPI.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPut(context.Background(), realm, clientUuid, scopeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientUuid string
		var scopeId string

		resp, httpRes, err := apiClient.DefaultAPI.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGet(context.Background(), realm, clientUuid, scopeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientUuid string

		resp, httpRes, err := apiClient.DefaultAPI.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGet(context.Background(), realm, clientUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var clientUuid string

		resp, httpRes, err := apiClient.DefaultAPI.AdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGet(context.Background(), realm, clientUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
