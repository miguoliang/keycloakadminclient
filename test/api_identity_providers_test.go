/*
Keycloak Admin REST API

Testing IdentityProvidersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package keycloakadminclient

import (
	"context"
	openapiclient "github.com/miguoliang/keycloakadminclient"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_keycloakadminclient_IdentityProvidersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test IdentityProvidersAPIService AdminRealmsRealmIdentityProviderImportConfigPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.IdentityProvidersAPI.AdminRealmsRealmIdentityProviderImportConfigPost(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersAPIService AdminRealmsRealmIdentityProviderInstancesAliasDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var alias string

		httpRes, err := apiClient.IdentityProvidersAPI.AdminRealmsRealmIdentityProviderInstancesAliasDelete(context.Background(), realm, alias).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersAPIService AdminRealmsRealmIdentityProviderInstancesAliasExportGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var alias string

		httpRes, err := apiClient.IdentityProvidersAPI.AdminRealmsRealmIdentityProviderInstancesAliasExportGet(context.Background(), realm, alias).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersAPIService AdminRealmsRealmIdentityProviderInstancesAliasGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var alias string

		resp, httpRes, err := apiClient.IdentityProvidersAPI.AdminRealmsRealmIdentityProviderInstancesAliasGet(context.Background(), realm, alias).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersAPIService AdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var alias string

		resp, httpRes, err := apiClient.IdentityProvidersAPI.AdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGet(context.Background(), realm, alias).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersAPIService AdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var alias string

		resp, httpRes, err := apiClient.IdentityProvidersAPI.AdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPut(context.Background(), realm, alias).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersAPIService AdminRealmsRealmIdentityProviderInstancesAliasMapperTypesGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var alias string

		resp, httpRes, err := apiClient.IdentityProvidersAPI.AdminRealmsRealmIdentityProviderInstancesAliasMapperTypesGet(context.Background(), realm, alias).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersAPIService AdminRealmsRealmIdentityProviderInstancesAliasMappersGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var alias string

		resp, httpRes, err := apiClient.IdentityProvidersAPI.AdminRealmsRealmIdentityProviderInstancesAliasMappersGet(context.Background(), realm, alias).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersAPIService AdminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var alias string
		var id string

		httpRes, err := apiClient.IdentityProvidersAPI.AdminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete(context.Background(), realm, alias, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersAPIService AdminRealmsRealmIdentityProviderInstancesAliasMappersIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var alias string
		var id string

		resp, httpRes, err := apiClient.IdentityProvidersAPI.AdminRealmsRealmIdentityProviderInstancesAliasMappersIdGet(context.Background(), realm, alias, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersAPIService AdminRealmsRealmIdentityProviderInstancesAliasMappersIdPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var alias string
		var id string

		httpRes, err := apiClient.IdentityProvidersAPI.AdminRealmsRealmIdentityProviderInstancesAliasMappersIdPut(context.Background(), realm, alias, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersAPIService AdminRealmsRealmIdentityProviderInstancesAliasMappersPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var alias string

		httpRes, err := apiClient.IdentityProvidersAPI.AdminRealmsRealmIdentityProviderInstancesAliasMappersPost(context.Background(), realm, alias).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersAPIService AdminRealmsRealmIdentityProviderInstancesAliasPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var alias string

		httpRes, err := apiClient.IdentityProvidersAPI.AdminRealmsRealmIdentityProviderInstancesAliasPut(context.Background(), realm, alias).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersAPIService AdminRealmsRealmIdentityProviderInstancesAliasReloadKeysGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var alias string

		resp, httpRes, err := apiClient.IdentityProvidersAPI.AdminRealmsRealmIdentityProviderInstancesAliasReloadKeysGet(context.Background(), realm, alias).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersAPIService AdminRealmsRealmIdentityProviderInstancesGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		resp, httpRes, err := apiClient.IdentityProvidersAPI.AdminRealmsRealmIdentityProviderInstancesGet(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersAPIService AdminRealmsRealmIdentityProviderInstancesPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string

		httpRes, err := apiClient.IdentityProvidersAPI.AdminRealmsRealmIdentityProviderInstancesPost(context.Background(), realm).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersAPIService AdminRealmsRealmIdentityProviderProvidersProviderIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var realm string
		var providerId string

		resp, httpRes, err := apiClient.IdentityProvidersAPI.AdminRealmsRealmIdentityProviderProvidersProviderIdGet(context.Background(), realm, providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
