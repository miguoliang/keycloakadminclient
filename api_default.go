/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keycloakadminclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// DefaultAPIService DefaultAPI service
type DefaultAPIService service

type DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerGetRequest struct {
	ctx        context.Context
	ApiService *DefaultAPIService
	realm      string
	clientUuid string
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerGetRequest) Execute() (*ResourceServerRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param clientUuid id of client (not client-id!)
	@return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerGet(ctx context.Context, realm string, clientUuid string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerGetRequest {
	return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
//
//	@return ResourceServerRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerGetExecute(r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerGetRequest) (*ResourceServerRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResourceServerRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerImportPostRequest struct {
	ctx                          context.Context
	ApiService                   *DefaultAPIService
	realm                        string
	clientUuid                   string
	resourceServerRepresentation *ResourceServerRepresentation
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerImportPostRequest) ResourceServerRepresentation(resourceServerRepresentation ResourceServerRepresentation) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerImportPostRequest {
	r.resourceServerRepresentation = &resourceServerRepresentation
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerImportPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerImportPostExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerImportPost Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerImportPost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param clientUuid id of client (not client-id!)
	@return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerImportPostRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerImportPost(ctx context.Context, realm string, clientUuid string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerImportPostRequest {
	return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerImportPostRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerImportPostExecute(r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerImportPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerImportPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/import"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.resourceServerRepresentation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePostRequest struct {
	ctx                     context.Context
	ApiService              *DefaultAPIService
	realm                   string
	clientUuid              string
	policyEvaluationRequest *PolicyEvaluationRequest
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePostRequest) PolicyEvaluationRequest(policyEvaluationRequest PolicyEvaluationRequest) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePostRequest {
	r.policyEvaluationRequest = &policyEvaluationRequest
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePostRequest) Execute() (*PolicyEvaluationResponse, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePostExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePost Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param clientUuid id of client (not client-id!)
	@return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePostRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePost(ctx context.Context, realm string, clientUuid string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePostRequest {
	return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePostRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
//
//	@return PolicyEvaluationResponse
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePostExecute(r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePostRequest) (*PolicyEvaluationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PolicyEvaluationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/permission/evaluate"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.policyEvaluationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest struct {
	ctx        context.Context
	ApiService *DefaultAPIService
	realm      string
	clientUuid string
	fields     *string
	first      *int32
	max        *int32
	name       *string
	owner      *string
	permission *bool
	policyId   *string
	resource   *string
	scope      *string
	type_      *string
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest) Fields(fields string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest {
	r.fields = &fields
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest) First(first int32) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest {
	r.first = &first
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest) Max(max int32) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest {
	r.max = &max
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest) Name(name string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest {
	r.name = &name
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest) Owner(owner string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest {
	r.owner = &owner
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest) Permission(permission bool) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest {
	r.permission = &permission
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest) PolicyId(policyId string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest {
	r.policyId = &policyId
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest) Resource(resource string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest {
	r.resource = &resource
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest) Scope(scope string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest {
	r.scope = &scope
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest) Type_(type_ string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest {
	r.type_ = &type_
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest) Execute() ([]AbstractPolicyRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param clientUuid id of client (not client-id!)
	@return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGet(ctx context.Context, realm string, clientUuid string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest {
	return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
//
//	@return []AbstractPolicyRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetExecute(r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGetRequest) ([]AbstractPolicyRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []AbstractPolicyRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/permission"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.first != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "first", r.first, "")
	}
	if r.max != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.owner != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner", r.owner, "")
	}
	if r.permission != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "permission", r.permission, "")
	}
	if r.policyId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "policyId", r.policyId, "")
	}
	if r.resource != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resource", r.resource, "")
	}
	if r.scope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scope", r.scope, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPostRequest struct {
	ctx        context.Context
	ApiService *DefaultAPIService
	realm      string
	clientUuid string
	body       *string
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPostRequest) Body(body string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPostRequest {
	r.body = &body
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPostExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPost Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param clientUuid id of client (not client-id!)
	@return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPostRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPost(ctx context.Context, realm string, clientUuid string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPostRequest {
	return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPostRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPostExecute(r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/permission"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGetRequest struct {
	ctx        context.Context
	ApiService *DefaultAPIService
	realm      string
	clientUuid string
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGetRequest) Execute() ([]PolicyProviderRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param clientUuid id of client (not client-id!)
	@return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGet(ctx context.Context, realm string, clientUuid string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGetRequest {
	return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
//
//	@return []PolicyProviderRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGetExecute(r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGetRequest) ([]PolicyProviderRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []PolicyProviderRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/permission/providers"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetRequest struct {
	ctx        context.Context
	ApiService *DefaultAPIService
	realm      string
	clientUuid string
	fields     *string
	name       *string
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetRequest) Fields(fields string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetRequest {
	r.fields = &fields
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetRequest) Name(name string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetRequest {
	r.name = &name
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetRequest) Execute() (*AbstractPolicyRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param clientUuid id of client (not client-id!)
	@return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGet(ctx context.Context, realm string, clientUuid string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetRequest {
	return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
//
//	@return AbstractPolicyRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetExecute(r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGetRequest) (*AbstractPolicyRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AbstractPolicyRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/permission/search"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePostRequest struct {
	ctx                     context.Context
	ApiService              *DefaultAPIService
	realm                   string
	clientUuid              string
	policyEvaluationRequest *PolicyEvaluationRequest
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePostRequest) PolicyEvaluationRequest(policyEvaluationRequest PolicyEvaluationRequest) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePostRequest {
	r.policyEvaluationRequest = &policyEvaluationRequest
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePostRequest) Execute() (*PolicyEvaluationResponse, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePostExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePost Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param clientUuid id of client (not client-id!)
	@return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePostRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePost(ctx context.Context, realm string, clientUuid string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePostRequest {
	return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePostRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
//
//	@return PolicyEvaluationResponse
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePostExecute(r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePostRequest) (*PolicyEvaluationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PolicyEvaluationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/policy/evaluate"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.policyEvaluationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest struct {
	ctx        context.Context
	ApiService *DefaultAPIService
	realm      string
	clientUuid string
	fields     *string
	first      *int32
	max        *int32
	name       *string
	owner      *string
	permission *bool
	policyId   *string
	resource   *string
	scope      *string
	type_      *string
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest) Fields(fields string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest {
	r.fields = &fields
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest) First(first int32) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest {
	r.first = &first
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest) Max(max int32) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest {
	r.max = &max
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest) Name(name string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest {
	r.name = &name
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest) Owner(owner string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest {
	r.owner = &owner
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest) Permission(permission bool) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest {
	r.permission = &permission
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest) PolicyId(policyId string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest {
	r.policyId = &policyId
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest) Resource(resource string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest {
	r.resource = &resource
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest) Scope(scope string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest {
	r.scope = &scope
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest) Type_(type_ string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest {
	r.type_ = &type_
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest) Execute() ([]AbstractPolicyRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param clientUuid id of client (not client-id!)
	@return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGet(ctx context.Context, realm string, clientUuid string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest {
	return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
//
//	@return []AbstractPolicyRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetExecute(r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGetRequest) ([]AbstractPolicyRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []AbstractPolicyRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/policy"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.first != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "first", r.first, "")
	}
	if r.max != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.owner != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner", r.owner, "")
	}
	if r.permission != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "permission", r.permission, "")
	}
	if r.policyId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "policyId", r.policyId, "")
	}
	if r.resource != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resource", r.resource, "")
	}
	if r.scope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scope", r.scope, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPostRequest struct {
	ctx        context.Context
	ApiService *DefaultAPIService
	realm      string
	clientUuid string
	body       *string
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPostRequest) Body(body string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPostRequest {
	r.body = &body
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPostExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPost Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param clientUuid id of client (not client-id!)
	@return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPostRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPost(ctx context.Context, realm string, clientUuid string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPostRequest {
	return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPostRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPostExecute(r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/policy"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGetRequest struct {
	ctx        context.Context
	ApiService *DefaultAPIService
	realm      string
	clientUuid string
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGetRequest) Execute() ([]PolicyProviderRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param clientUuid id of client (not client-id!)
	@return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGet(ctx context.Context, realm string, clientUuid string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGetRequest {
	return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
//
//	@return []PolicyProviderRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGetExecute(r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGetRequest) ([]PolicyProviderRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []PolicyProviderRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/policy/providers"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetRequest struct {
	ctx        context.Context
	ApiService *DefaultAPIService
	realm      string
	clientUuid string
	fields     *string
	name       *string
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetRequest) Fields(fields string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetRequest {
	r.fields = &fields
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetRequest) Name(name string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetRequest {
	r.name = &name
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetRequest) Execute() (*AbstractPolicyRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param clientUuid id of client (not client-id!)
	@return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGet(ctx context.Context, realm string, clientUuid string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetRequest {
	return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
//
//	@return AbstractPolicyRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetExecute(r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGetRequest) (*AbstractPolicyRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AbstractPolicyRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/policy/search"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPutRequest struct {
	ctx                          context.Context
	ApiService                   *DefaultAPIService
	realm                        string
	clientUuid                   string
	resourceServerRepresentation *ResourceServerRepresentation
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPutRequest) ResourceServerRepresentation(resourceServerRepresentation ResourceServerRepresentation) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPutRequest {
	r.resourceServerRepresentation = &resourceServerRepresentation
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPutExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerPut Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerPut

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param clientUuid id of client (not client-id!)
	@return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPutRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPut(ctx context.Context, realm string, clientUuid string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPutRequest {
	return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPutRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerPutExecute(r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.resourceServerRepresentation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest struct {
	ctx         context.Context
	ApiService  *DefaultAPIService
	realm       string
	clientUuid  string
	id          *string
	deep        *bool
	exactName   *bool
	first       *int32
	matchingUri *bool
	max         *int32
	name        *string
	owner       *string
	scope       *string
	type_       *string
	uri         *string
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest) Id(id string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest {
	r.id = &id
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest) Deep(deep bool) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest {
	r.deep = &deep
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest) ExactName(exactName bool) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest {
	r.exactName = &exactName
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest) First(first int32) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest {
	r.first = &first
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest) MatchingUri(matchingUri bool) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest {
	r.matchingUri = &matchingUri
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest) Max(max int32) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest {
	r.max = &max
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest) Name(name string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest {
	r.name = &name
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest) Owner(owner string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest {
	r.owner = &owner
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest) Scope(scope string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest {
	r.scope = &scope
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest) Type_(type_ string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest {
	r.type_ = &type_
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest) Uri(uri string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest {
	r.uri = &uri
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest) Execute() ([]ResourceRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param clientUuid id of client (not client-id!)
	@return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGet(ctx context.Context, realm string, clientUuid string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest {
	return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
//
//	@return []ResourceRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetExecute(r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGetRequest) ([]ResourceRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ResourceRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "_id", r.id, "")
	}
	if r.deep != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deep", r.deep, "")
	}
	if r.exactName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exactName", r.exactName, "")
	}
	if r.first != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "first", r.first, "")
	}
	if r.matchingUri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "matchingUri", r.matchingUri, "")
	}
	if r.max != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.owner != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner", r.owner, "")
	}
	if r.scope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scope", r.scope, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.uri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uri", r.uri, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest struct {
	ctx                    context.Context
	ApiService             *DefaultAPIService
	realm                  string
	clientUuid             string
	id                     *string
	deep                   *bool
	exactName              *bool
	first                  *int32
	matchingUri            *bool
	max                    *int32
	name                   *string
	owner                  *string
	scope                  *string
	type_                  *string
	uri                    *string
	resourceRepresentation *ResourceRepresentation
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest) Id(id string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest {
	r.id = &id
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest) Deep(deep bool) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest {
	r.deep = &deep
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest) ExactName(exactName bool) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest {
	r.exactName = &exactName
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest) First(first int32) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest {
	r.first = &first
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest) MatchingUri(matchingUri bool) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest {
	r.matchingUri = &matchingUri
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest) Max(max int32) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest {
	r.max = &max
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest) Name(name string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest {
	r.name = &name
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest) Owner(owner string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest {
	r.owner = &owner
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest) Scope(scope string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest {
	r.scope = &scope
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest) Type_(type_ string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest {
	r.type_ = &type_
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest) Uri(uri string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest {
	r.uri = &uri
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest) ResourceRepresentation(resourceRepresentation ResourceRepresentation) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest {
	r.resourceRepresentation = &resourceRepresentation
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest) Execute() (*ResourceRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePost Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param clientUuid id of client (not client-id!)
	@return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePost(ctx context.Context, realm string, clientUuid string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest {
	return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
//
//	@return ResourceRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostExecute(r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePostRequest) (*ResourceRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResourceRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "_id", r.id, "")
	}
	if r.deep != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deep", r.deep, "")
	}
	if r.exactName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exactName", r.exactName, "")
	}
	if r.first != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "first", r.first, "")
	}
	if r.matchingUri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "matchingUri", r.matchingUri, "")
	}
	if r.max != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.owner != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner", r.owner, "")
	}
	if r.scope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scope", r.scope, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.uri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uri", r.uri, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.resourceRepresentation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest struct {
	ctx         context.Context
	ApiService  *DefaultAPIService
	realm       string
	clientUuid  string
	resourceId  string
	id          *string
	deep        *bool
	exactName   *bool
	first       *int32
	matchingUri *bool
	max         *int32
	name        *string
	owner       *string
	scope       *string
	type_       *string
	uri         *string
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest) Id(id string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest {
	r.id = &id
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest) Deep(deep bool) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest {
	r.deep = &deep
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest) ExactName(exactName bool) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest {
	r.exactName = &exactName
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest) First(first int32) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest {
	r.first = &first
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest) MatchingUri(matchingUri bool) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest {
	r.matchingUri = &matchingUri
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest) Max(max int32) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest {
	r.max = &max
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest) Name(name string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest {
	r.name = &name
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest) Owner(owner string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest {
	r.owner = &owner
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest) Scope(scope string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest {
	r.scope = &scope
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest) Type_(type_ string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest {
	r.type_ = &type_
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest) Uri(uri string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest {
	r.uri = &uri
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param clientUuid id of client (not client-id!)
	@param resourceId
	@return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGet(ctx context.Context, realm string, clientUuid string, resourceId string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest {
	return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		clientUuid: clientUuid,
		resourceId: resourceId,
	}
}

// Execute executes the request
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetExecute(r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/{resource-id}/attributes"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource-id"+"}", url.PathEscape(parameterValueToString(r.resourceId, "resourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "_id", r.id, "")
	}
	if r.deep != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deep", r.deep, "")
	}
	if r.exactName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exactName", r.exactName, "")
	}
	if r.first != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "first", r.first, "")
	}
	if r.matchingUri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "matchingUri", r.matchingUri, "")
	}
	if r.max != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.owner != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner", r.owner, "")
	}
	if r.scope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scope", r.scope, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.uri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uri", r.uri, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest struct {
	ctx         context.Context
	ApiService  *DefaultAPIService
	realm       string
	clientUuid  string
	resourceId  string
	id          *string
	deep        *bool
	exactName   *bool
	first       *int32
	matchingUri *bool
	max         *int32
	name        *string
	owner       *string
	scope       *string
	type_       *string
	uri         *string
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest) Id(id string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest {
	r.id = &id
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest) Deep(deep bool) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest {
	r.deep = &deep
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest) ExactName(exactName bool) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest {
	r.exactName = &exactName
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest) First(first int32) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest {
	r.first = &first
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest) MatchingUri(matchingUri bool) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest {
	r.matchingUri = &matchingUri
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest) Max(max int32) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest {
	r.max = &max
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest) Name(name string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest {
	r.name = &name
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest) Owner(owner string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest {
	r.owner = &owner
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest) Scope(scope string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest {
	r.scope = &scope
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest) Type_(type_ string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest {
	r.type_ = &type_
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest) Uri(uri string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest {
	r.uri = &uri
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDelete Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDelete

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param clientUuid id of client (not client-id!)
	@param resourceId
	@return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDelete(ctx context.Context, realm string, clientUuid string, resourceId string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest {
	return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		clientUuid: clientUuid,
		resourceId: resourceId,
	}
}

// Execute executes the request
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteExecute(r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/{resource-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource-id"+"}", url.PathEscape(parameterValueToString(r.resourceId, "resourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "_id", r.id, "")
	}
	if r.deep != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deep", r.deep, "")
	}
	if r.exactName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exactName", r.exactName, "")
	}
	if r.first != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "first", r.first, "")
	}
	if r.matchingUri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "matchingUri", r.matchingUri, "")
	}
	if r.max != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.owner != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner", r.owner, "")
	}
	if r.scope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scope", r.scope, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.uri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uri", r.uri, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest struct {
	ctx         context.Context
	ApiService  *DefaultAPIService
	realm       string
	clientUuid  string
	resourceId  string
	id          *string
	deep        *bool
	exactName   *bool
	first       *int32
	matchingUri *bool
	max         *int32
	name        *string
	owner       *string
	scope       *string
	type_       *string
	uri         *string
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest) Id(id string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest {
	r.id = &id
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest) Deep(deep bool) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest {
	r.deep = &deep
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest) ExactName(exactName bool) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest {
	r.exactName = &exactName
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest) First(first int32) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest {
	r.first = &first
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest) MatchingUri(matchingUri bool) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest {
	r.matchingUri = &matchingUri
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest) Max(max int32) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest {
	r.max = &max
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest) Name(name string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest {
	r.name = &name
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest) Owner(owner string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest {
	r.owner = &owner
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest) Scope(scope string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest {
	r.scope = &scope
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest) Type_(type_ string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest {
	r.type_ = &type_
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest) Uri(uri string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest {
	r.uri = &uri
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest) Execute() (*ResourceRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param clientUuid id of client (not client-id!)
	@param resourceId
	@return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGet(ctx context.Context, realm string, clientUuid string, resourceId string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest {
	return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		clientUuid: clientUuid,
		resourceId: resourceId,
	}
}

// Execute executes the request
//
//	@return ResourceRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetExecute(r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGetRequest) (*ResourceRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResourceRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/{resource-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource-id"+"}", url.PathEscape(parameterValueToString(r.resourceId, "resourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "_id", r.id, "")
	}
	if r.deep != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deep", r.deep, "")
	}
	if r.exactName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exactName", r.exactName, "")
	}
	if r.first != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "first", r.first, "")
	}
	if r.matchingUri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "matchingUri", r.matchingUri, "")
	}
	if r.max != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.owner != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner", r.owner, "")
	}
	if r.scope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scope", r.scope, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.uri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uri", r.uri, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest struct {
	ctx         context.Context
	ApiService  *DefaultAPIService
	realm       string
	clientUuid  string
	resourceId  string
	id          *string
	deep        *bool
	exactName   *bool
	first       *int32
	matchingUri *bool
	max         *int32
	name        *string
	owner       *string
	scope       *string
	type_       *string
	uri         *string
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest) Id(id string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest {
	r.id = &id
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest) Deep(deep bool) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest {
	r.deep = &deep
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest) ExactName(exactName bool) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest {
	r.exactName = &exactName
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest) First(first int32) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest {
	r.first = &first
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest) MatchingUri(matchingUri bool) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest {
	r.matchingUri = &matchingUri
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest) Max(max int32) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest {
	r.max = &max
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest) Name(name string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest {
	r.name = &name
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest) Owner(owner string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest {
	r.owner = &owner
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest) Scope(scope string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest {
	r.scope = &scope
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest) Type_(type_ string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest {
	r.type_ = &type_
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest) Uri(uri string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest {
	r.uri = &uri
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest) Execute() ([]PolicyRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param clientUuid id of client (not client-id!)
	@param resourceId
	@return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGet(ctx context.Context, realm string, clientUuid string, resourceId string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest {
	return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		clientUuid: clientUuid,
		resourceId: resourceId,
	}
}

// Execute executes the request
//
//	@return []PolicyRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetExecute(r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGetRequest) ([]PolicyRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []PolicyRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/{resource-id}/permissions"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource-id"+"}", url.PathEscape(parameterValueToString(r.resourceId, "resourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "_id", r.id, "")
	}
	if r.deep != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deep", r.deep, "")
	}
	if r.exactName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exactName", r.exactName, "")
	}
	if r.first != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "first", r.first, "")
	}
	if r.matchingUri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "matchingUri", r.matchingUri, "")
	}
	if r.max != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.owner != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner", r.owner, "")
	}
	if r.scope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scope", r.scope, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.uri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uri", r.uri, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest struct {
	ctx                    context.Context
	ApiService             *DefaultAPIService
	realm                  string
	clientUuid             string
	resourceId             string
	id                     *string
	deep                   *bool
	exactName              *bool
	first                  *int32
	matchingUri            *bool
	max                    *int32
	name                   *string
	owner                  *string
	scope                  *string
	type_                  *string
	uri                    *string
	resourceRepresentation *ResourceRepresentation
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest) Id(id string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest {
	r.id = &id
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest) Deep(deep bool) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest {
	r.deep = &deep
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest) ExactName(exactName bool) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest {
	r.exactName = &exactName
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest) First(first int32) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest {
	r.first = &first
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest) MatchingUri(matchingUri bool) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest {
	r.matchingUri = &matchingUri
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest) Max(max int32) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest {
	r.max = &max
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest) Name(name string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest {
	r.name = &name
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest) Owner(owner string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest {
	r.owner = &owner
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest) Scope(scope string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest {
	r.scope = &scope
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest) Type_(type_ string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest {
	r.type_ = &type_
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest) Uri(uri string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest {
	r.uri = &uri
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest) ResourceRepresentation(resourceRepresentation ResourceRepresentation) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest {
	r.resourceRepresentation = &resourceRepresentation
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPut Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPut

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param clientUuid id of client (not client-id!)
	@param resourceId
	@return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPut(ctx context.Context, realm string, clientUuid string, resourceId string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest {
	return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		clientUuid: clientUuid,
		resourceId: resourceId,
	}
}

// Execute executes the request
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutExecute(r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/{resource-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource-id"+"}", url.PathEscape(parameterValueToString(r.resourceId, "resourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "_id", r.id, "")
	}
	if r.deep != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deep", r.deep, "")
	}
	if r.exactName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exactName", r.exactName, "")
	}
	if r.first != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "first", r.first, "")
	}
	if r.matchingUri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "matchingUri", r.matchingUri, "")
	}
	if r.max != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.owner != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner", r.owner, "")
	}
	if r.scope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scope", r.scope, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.uri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uri", r.uri, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.resourceRepresentation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest struct {
	ctx         context.Context
	ApiService  *DefaultAPIService
	realm       string
	clientUuid  string
	resourceId  string
	id          *string
	deep        *bool
	exactName   *bool
	first       *int32
	matchingUri *bool
	max         *int32
	name        *string
	owner       *string
	scope       *string
	type_       *string
	uri         *string
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest) Id(id string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest {
	r.id = &id
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest) Deep(deep bool) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest {
	r.deep = &deep
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest) ExactName(exactName bool) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest {
	r.exactName = &exactName
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest) First(first int32) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest {
	r.first = &first
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest) MatchingUri(matchingUri bool) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest {
	r.matchingUri = &matchingUri
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest) Max(max int32) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest {
	r.max = &max
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest) Name(name string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest {
	r.name = &name
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest) Owner(owner string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest {
	r.owner = &owner
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest) Scope(scope string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest {
	r.scope = &scope
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest) Type_(type_ string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest {
	r.type_ = &type_
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest) Uri(uri string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest {
	r.uri = &uri
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest) Execute() ([]ScopeRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param clientUuid id of client (not client-id!)
	@param resourceId
	@return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGet(ctx context.Context, realm string, clientUuid string, resourceId string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest {
	return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		clientUuid: clientUuid,
		resourceId: resourceId,
	}
}

// Execute executes the request
//
//	@return []ScopeRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetExecute(r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGetRequest) ([]ScopeRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ScopeRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/{resource-id}/scopes"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource-id"+"}", url.PathEscape(parameterValueToString(r.resourceId, "resourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "_id", r.id, "")
	}
	if r.deep != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deep", r.deep, "")
	}
	if r.exactName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exactName", r.exactName, "")
	}
	if r.first != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "first", r.first, "")
	}
	if r.matchingUri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "matchingUri", r.matchingUri, "")
	}
	if r.max != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.owner != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner", r.owner, "")
	}
	if r.scope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scope", r.scope, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.uri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uri", r.uri, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest struct {
	ctx         context.Context
	ApiService  *DefaultAPIService
	realm       string
	clientUuid  string
	id          *string
	deep        *bool
	exactName   *bool
	first       *int32
	matchingUri *bool
	max         *int32
	owner       *string
	scope       *string
	type_       *string
	uri         *string
	name        *string
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest) Id(id string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest {
	r.id = &id
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest) Deep(deep bool) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest {
	r.deep = &deep
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest) ExactName(exactName bool) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest {
	r.exactName = &exactName
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest) First(first int32) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest {
	r.first = &first
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest) MatchingUri(matchingUri bool) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest {
	r.matchingUri = &matchingUri
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest) Max(max int32) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest {
	r.max = &max
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest) Owner(owner string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest {
	r.owner = &owner
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest) Scope(scope string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest {
	r.scope = &scope
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest) Type_(type_ string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest {
	r.type_ = &type_
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest) Uri(uri string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest {
	r.uri = &uri
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest) Name(name string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest {
	r.name = &name
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest) Execute() (*ResourceRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param clientUuid id of client (not client-id!)
	@return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGet(ctx context.Context, realm string, clientUuid string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest {
	return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
//
//	@return ResourceRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetExecute(r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGetRequest) (*ResourceRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResourceRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/resource/search"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "_id", r.id, "")
	}
	if r.deep != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deep", r.deep, "")
	}
	if r.exactName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exactName", r.exactName, "")
	}
	if r.first != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "first", r.first, "")
	}
	if r.matchingUri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "matchingUri", r.matchingUri, "")
	}
	if r.max != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "")
	}
	if r.owner != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner", r.owner, "")
	}
	if r.scope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scope", r.scope, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.uri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uri", r.uri, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetRequest struct {
	ctx        context.Context
	ApiService *DefaultAPIService
	realm      string
	clientUuid string
	first      *int32
	max        *int32
	name       *string
	scopeId    *string
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetRequest) First(first int32) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetRequest {
	r.first = &first
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetRequest) Max(max int32) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetRequest {
	r.max = &max
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetRequest) Name(name string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetRequest {
	r.name = &name
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetRequest) ScopeId(scopeId string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetRequest {
	r.scopeId = &scopeId
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetRequest) Execute() ([]ScopeRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param clientUuid id of client (not client-id!)
	@return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGet(ctx context.Context, realm string, clientUuid string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetRequest {
	return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
//
//	@return []ScopeRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetExecute(r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGetRequest) ([]ScopeRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ScopeRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.first != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "first", r.first, "")
	}
	if r.max != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.scopeId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scopeId", r.scopeId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopePostRequest struct {
	ctx                 context.Context
	ApiService          *DefaultAPIService
	realm               string
	clientUuid          string
	scopeRepresentation *ScopeRepresentation
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopePostRequest) ScopeRepresentation(scopeRepresentation ScopeRepresentation) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopePostRequest {
	r.scopeRepresentation = &scopeRepresentation
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopePostExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerScopePost Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerScopePost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param clientUuid id of client (not client-id!)
	@return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopePostRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerScopePost(ctx context.Context, realm string, clientUuid string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopePostRequest {
	return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopePostRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerScopePostExecute(r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.scopeRepresentation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDeleteRequest struct {
	ctx        context.Context
	ApiService *DefaultAPIService
	realm      string
	clientUuid string
	scopeId    string
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDeleteExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDelete Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDelete

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param clientUuid id of client (not client-id!)
	@param scopeId
	@return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDeleteRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDelete(ctx context.Context, realm string, clientUuid string, scopeId string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDeleteRequest {
	return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		clientUuid: clientUuid,
		scopeId:    scopeId,
	}
}

// Execute executes the request
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDeleteExecute(r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope/{scope-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scope-id"+"}", url.PathEscape(parameterValueToString(r.scopeId, "scopeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGetRequest struct {
	ctx        context.Context
	ApiService *DefaultAPIService
	realm      string
	clientUuid string
	scopeId    string
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGetRequest) Execute() (*ScopeRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param clientUuid id of client (not client-id!)
	@param scopeId
	@return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGet(ctx context.Context, realm string, clientUuid string, scopeId string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGetRequest {
	return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		clientUuid: clientUuid,
		scopeId:    scopeId,
	}
}

// Execute executes the request
//
//	@return ScopeRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGetExecute(r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGetRequest) (*ScopeRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ScopeRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope/{scope-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scope-id"+"}", url.PathEscape(parameterValueToString(r.scopeId, "scopeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGetRequest struct {
	ctx        context.Context
	ApiService *DefaultAPIService
	realm      string
	clientUuid string
	scopeId    string
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGetRequest) Execute() ([]PolicyRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param clientUuid id of client (not client-id!)
	@param scopeId
	@return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGet(ctx context.Context, realm string, clientUuid string, scopeId string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGetRequest {
	return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		clientUuid: clientUuid,
		scopeId:    scopeId,
	}
}

// Execute executes the request
//
//	@return []PolicyRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGetExecute(r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGetRequest) ([]PolicyRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []PolicyRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope/{scope-id}/permissions"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scope-id"+"}", url.PathEscape(parameterValueToString(r.scopeId, "scopeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPutRequest struct {
	ctx                 context.Context
	ApiService          *DefaultAPIService
	realm               string
	clientUuid          string
	scopeId             string
	scopeRepresentation *ScopeRepresentation
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPutRequest) ScopeRepresentation(scopeRepresentation ScopeRepresentation) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPutRequest {
	r.scopeRepresentation = &scopeRepresentation
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPutExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPut Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPut

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param clientUuid id of client (not client-id!)
	@param scopeId
	@return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPutRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPut(ctx context.Context, realm string, clientUuid string, scopeId string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPutRequest {
	return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPutRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		clientUuid: clientUuid,
		scopeId:    scopeId,
	}
}

// Execute executes the request
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPutExecute(r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope/{scope-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scope-id"+"}", url.PathEscape(parameterValueToString(r.scopeId, "scopeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.scopeRepresentation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGetRequest struct {
	ctx        context.Context
	ApiService *DefaultAPIService
	realm      string
	clientUuid string
	scopeId    string
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGetRequest) Execute() ([]ResourceRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param clientUuid id of client (not client-id!)
	@param scopeId
	@return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGet(ctx context.Context, realm string, clientUuid string, scopeId string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGetRequest {
	return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		clientUuid: clientUuid,
		scopeId:    scopeId,
	}
}

// Execute executes the request
//
//	@return []ResourceRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGetExecute(r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGetRequest) ([]ResourceRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ResourceRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope/{scope-id}/resources"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scope-id"+"}", url.PathEscape(parameterValueToString(r.scopeId, "scopeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGetRequest struct {
	ctx        context.Context
	ApiService *DefaultAPIService
	realm      string
	clientUuid string
	name       *string
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGetRequest) Name(name string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGetRequest {
	r.name = &name
	return r
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGetRequest) Execute() ([]ScopeRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param clientUuid id of client (not client-id!)
	@return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGet(ctx context.Context, realm string, clientUuid string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGetRequest {
	return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
//
//	@return []ScopeRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGetExecute(r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGetRequest) ([]ScopeRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ScopeRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/scope/search"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGetRequest struct {
	ctx        context.Context
	ApiService *DefaultAPIService
	realm      string
	clientUuid string
}

func (r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGetRequest) Execute() (*ResourceServerRepresentation, *http.Response, error) {
	return r.ApiService.AdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGetExecute(r)
}

/*
AdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGet Method for AdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param realm realm name (not id!)
	@param clientUuid id of client (not client-id!)
	@return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGetRequest
*/
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGet(ctx context.Context, realm string, clientUuid string) DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGetRequest {
	return DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGetRequest{
		ApiService: a,
		ctx:        ctx,
		realm:      realm,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
//
//	@return ResourceServerRepresentation
func (a *DefaultAPIService) AdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGetExecute(r DefaultAPIAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGetRequest) (*ResourceServerRepresentation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResourceServerRepresentation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.AdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/realms/{realm}/clients/{client-uuid}/authz/resource-server/settings"
	localVarPath = strings.Replace(localVarPath, "{"+"realm"+"}", url.PathEscape(parameterValueToString(r.realm, "realm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client-uuid"+"}", url.PathEscape(parameterValueToString(r.clientUuid, "clientUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
