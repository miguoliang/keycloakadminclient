/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keycloakadminclient

import (
	"encoding/json"
	"fmt"
)

// Logic the model 'Logic'
type Logic string

// List of Logic
const (
	LOGIC_POSITIVE Logic = "POSITIVE"
	LOGIC_NEGATIVE Logic = "NEGATIVE"
)

// All allowed values of Logic enum
var AllowedLogicEnumValues = []Logic{
	"POSITIVE",
	"NEGATIVE",
}

func (v *Logic) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Logic(value)
	for _, existing := range AllowedLogicEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Logic", value)
}

// NewLogicFromValue returns a pointer to a valid Logic
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLogicFromValue(v string) (*Logic, error) {
	ev := Logic(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Logic: valid values are %v", v, AllowedLogicEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Logic) IsValid() bool {
	for _, existing := range AllowedLogicEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Logic value
func (v Logic) Ptr() *Logic {
	return &v
}

type NullableLogic struct {
	value *Logic
	isSet bool
}

func (v NullableLogic) Get() *Logic {
	return v.value
}

func (v *NullableLogic) Set(val *Logic) {
	v.value = val
	v.isSet = true
}

func (v NullableLogic) IsSet() bool {
	return v.isSet
}

func (v *NullableLogic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogic(val *Logic) *NullableLogic {
	return &NullableLogic{value: val, isSet: true}
}

func (v NullableLogic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

