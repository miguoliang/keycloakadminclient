/*
Keycloak Admin REST API

Testing RolesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package main

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/miguoliang/keycloakadminclient"
)

func Test_main_RolesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RolesAPIService AdminRealmsRealmClientsClientUuidRolesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var clientUuid string

		resp, httpRes, err := apiClient.RolesAPI.AdminRealmsRealmClientsClientUuidRolesGet(context.Background(), realm, clientUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService AdminRealmsRealmClientsClientUuidRolesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var clientUuid string

		httpRes, err := apiClient.RolesAPI.AdminRealmsRealmClientsClientUuidRolesPost(context.Background(), realm, clientUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var clientUuid string
		var roleName string

		resp, httpRes, err := apiClient.RolesAPI.AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGet(context.Background(), realm, clientUuid, roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var clientUuid string
		var roleName string

		httpRes, err := apiClient.RolesAPI.AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesDelete(context.Background(), realm, clientUuid, roleName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var clientUuid string
		var roleName string

		resp, httpRes, err := apiClient.RolesAPI.AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesGet(context.Background(), realm, clientUuid, roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var clientUuid string
		var roleName string

		httpRes, err := apiClient.RolesAPI.AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesPost(context.Background(), realm, clientUuid, roleName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var clientUuid string
		var roleName string

		resp, httpRes, err := apiClient.RolesAPI.AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGet(context.Background(), realm, clientUuid, roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService AdminRealmsRealmClientsClientUuidRolesRoleNameDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var clientUuid string
		var roleName string

		httpRes, err := apiClient.RolesAPI.AdminRealmsRealmClientsClientUuidRolesRoleNameDelete(context.Background(), realm, clientUuid, roleName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService AdminRealmsRealmClientsClientUuidRolesRoleNameGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var clientUuid string
		var roleName string

		resp, httpRes, err := apiClient.RolesAPI.AdminRealmsRealmClientsClientUuidRolesRoleNameGet(context.Background(), realm, clientUuid, roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService AdminRealmsRealmClientsClientUuidRolesRoleNameGroupsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var clientUuid string
		var roleName string

		resp, httpRes, err := apiClient.RolesAPI.AdminRealmsRealmClientsClientUuidRolesRoleNameGroupsGet(context.Background(), realm, clientUuid, roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService AdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var clientUuid string
		var roleName string

		resp, httpRes, err := apiClient.RolesAPI.AdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGet(context.Background(), realm, clientUuid, roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService AdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var clientUuid string
		var roleName string

		resp, httpRes, err := apiClient.RolesAPI.AdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPut(context.Background(), realm, clientUuid, roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService AdminRealmsRealmClientsClientUuidRolesRoleNamePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var clientUuid string
		var roleName string

		httpRes, err := apiClient.RolesAPI.AdminRealmsRealmClientsClientUuidRolesRoleNamePut(context.Background(), realm, clientUuid, roleName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService AdminRealmsRealmClientsClientUuidRolesRoleNameUsersGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var clientUuid string
		var roleName string

		resp, httpRes, err := apiClient.RolesAPI.AdminRealmsRealmClientsClientUuidRolesRoleNameUsersGet(context.Background(), realm, clientUuid, roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService AdminRealmsRealmRolesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string

		resp, httpRes, err := apiClient.RolesAPI.AdminRealmsRealmRolesGet(context.Background(), realm).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService AdminRealmsRealmRolesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string

		httpRes, err := apiClient.RolesAPI.AdminRealmsRealmRolesPost(context.Background(), realm).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService AdminRealmsRealmRolesRoleNameCompositesClientsClientUuidGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var clientUuid string
		var roleName string

		resp, httpRes, err := apiClient.RolesAPI.AdminRealmsRealmRolesRoleNameCompositesClientsClientUuidGet(context.Background(), realm, clientUuid, roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService AdminRealmsRealmRolesRoleNameCompositesDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var roleName string

		httpRes, err := apiClient.RolesAPI.AdminRealmsRealmRolesRoleNameCompositesDelete(context.Background(), realm, roleName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService AdminRealmsRealmRolesRoleNameCompositesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var roleName string

		resp, httpRes, err := apiClient.RolesAPI.AdminRealmsRealmRolesRoleNameCompositesGet(context.Background(), realm, roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService AdminRealmsRealmRolesRoleNameCompositesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var roleName string

		httpRes, err := apiClient.RolesAPI.AdminRealmsRealmRolesRoleNameCompositesPost(context.Background(), realm, roleName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService AdminRealmsRealmRolesRoleNameCompositesRealmGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var roleName string

		resp, httpRes, err := apiClient.RolesAPI.AdminRealmsRealmRolesRoleNameCompositesRealmGet(context.Background(), realm, roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService AdminRealmsRealmRolesRoleNameDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var roleName string

		httpRes, err := apiClient.RolesAPI.AdminRealmsRealmRolesRoleNameDelete(context.Background(), realm, roleName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService AdminRealmsRealmRolesRoleNameGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var roleName string

		resp, httpRes, err := apiClient.RolesAPI.AdminRealmsRealmRolesRoleNameGet(context.Background(), realm, roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService AdminRealmsRealmRolesRoleNameGroupsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var roleName string

		resp, httpRes, err := apiClient.RolesAPI.AdminRealmsRealmRolesRoleNameGroupsGet(context.Background(), realm, roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService AdminRealmsRealmRolesRoleNameManagementPermissionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var roleName string

		resp, httpRes, err := apiClient.RolesAPI.AdminRealmsRealmRolesRoleNameManagementPermissionsGet(context.Background(), realm, roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService AdminRealmsRealmRolesRoleNameManagementPermissionsPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var roleName string

		resp, httpRes, err := apiClient.RolesAPI.AdminRealmsRealmRolesRoleNameManagementPermissionsPut(context.Background(), realm, roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService AdminRealmsRealmRolesRoleNamePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var roleName string

		httpRes, err := apiClient.RolesAPI.AdminRealmsRealmRolesRoleNamePut(context.Background(), realm, roleName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService AdminRealmsRealmRolesRoleNameUsersGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var realm string
		var roleName string

		resp, httpRes, err := apiClient.RolesAPI.AdminRealmsRealmRolesRoleNameUsersGet(context.Background(), realm, roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
