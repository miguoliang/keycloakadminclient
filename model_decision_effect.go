/*
Keycloak Admin REST API

This is a REST API reference for the Keycloak Admin REST API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keycloakadminclient

import (
	"encoding/json"
	"fmt"
)

// DecisionEffect the model 'DecisionEffect'
type DecisionEffect string

// List of DecisionEffect
const (
	PERMIT DecisionEffect = "PERMIT"
	DENY DecisionEffect = "DENY"
)

// All allowed values of DecisionEffect enum
var AllowedDecisionEffectEnumValues = []DecisionEffect{
	"PERMIT",
	"DENY",
}

func (v *DecisionEffect) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DecisionEffect(value)
	for _, existing := range AllowedDecisionEffectEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DecisionEffect", value)
}

// NewDecisionEffectFromValue returns a pointer to a valid DecisionEffect
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDecisionEffectFromValue(v string) (*DecisionEffect, error) {
	ev := DecisionEffect(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DecisionEffect: valid values are %v", v, AllowedDecisionEffectEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DecisionEffect) IsValid() bool {
	for _, existing := range AllowedDecisionEffectEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DecisionEffect value
func (v DecisionEffect) Ptr() *DecisionEffect {
	return &v
}

type NullableDecisionEffect struct {
	value *DecisionEffect
	isSet bool
}

func (v NullableDecisionEffect) Get() *DecisionEffect {
	return v.value
}

func (v *NullableDecisionEffect) Set(val *DecisionEffect) {
	v.value = val
	v.isSet = true
}

func (v NullableDecisionEffect) IsSet() bool {
	return v.isSet
}

func (v *NullableDecisionEffect) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDecisionEffect(val *DecisionEffect) *NullableDecisionEffect {
	return &NullableDecisionEffect{value: val, isSet: true}
}

func (v NullableDecisionEffect) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDecisionEffect) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

